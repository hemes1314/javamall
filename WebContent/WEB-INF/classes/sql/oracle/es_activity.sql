--创建es_activity表
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ACTIVITY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_ACTIVITY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ACTIVITY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TABLE ES_ACTIVITY (
  ID NUMBER(11) NOT NULL,
  NAME VARCHAR(100) NOT NULL COMMENT '促销活动名称',
  START_TIME NUMBER(20,0) NOT NULL COMMENT '促销活动开始时间',
  END_TIME NUMBER(20,0) NOT NULL COMMENT '促销活动结束时间',
  PROMOTION_TYPES VARCHAR(45) NOT NULL COMMENT '1. 满减 2. 满赠  3. 折扣 4. 包邮',
  FILL_MINUS NUMBER(6,1) DEFAULT NULL COMMENT '满减的满',
  MINUS NUMBER(6,1) DEFAULT NULL COMMENT '满减的减',
  FILL_GIFT NUMBER(6,1) DEFAULT NULL COMMENT '满赠的满',
  DISCOUNT NUMBER(4,1) DEFAULT NULL COMMENT '折扣',
  IS_FREE_SHIPPING NUMBER(2,0) DEFAULT NULL COMMENT '是否包邮',
  IS_ENABLE NUMBER(2,0) DEFAULT NULL COMMENT '是否启用',
  DESCRIPTION CLOB COMMENT '描述',
  PRIMARY KEY (ID)
);

CREATE SEQUENCE S_ES_ACTIVITY;

CREATE TRIGGER "TIB_ES_ACTIVITY" BEFORE INSERT
	ON ES_ACTIVITY FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID						 INTEGER;
	BEGIN
		IF :NEW."ID" IS NULL THEN
			SELECT MAX("ID") INTO MAXID FROM ES_ACTIVITY;
			SELECT S_ES_ACTIVITY.NEXTVAL INTO :NEW."ID" FROM DUAL;
			IF MAXID>:NEW."ID" THEN
				LOOP
					SELECT S_ES_ACTIVITY.NEXTVAL INTO :NEW."ID" FROM DUAL;
					EXIT WHEN MAXID<:NEW."ID";
				END LOOP;
			END IF;
		END IF;
	EXCEPTION
		WHEN INTEGRITY_ERROR THEN
			RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;

--创建es_activity_gift表
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ACTIVITY_GIFT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_ACTIVITY_GIFT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ACTIVITY_GIFT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TABLE ES_ACTIVITY_GIFT (
	ID NUMBER(11) NOT NULL,
 	ACTIVITY_ID NUMBER(11) NOT NULL,
  PRODUCT_ID NUMBER(11) NOT NULL,
  PRIMARY KEY (ID)
)

CREATE SEQUENCE S_ES_ACTIVITY_GIFT

CREATE TRIGGER "TIB_ES_ACTIVITY_GIFT" BEFORE INSERT
	ON ES_ACTIVITY_GIFT FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID						 INTEGER;
	BEGIN
		IF :NEW."ID" IS NULL THEN
			SELECT MAX("ID") INTO MAXID FROM ES_ACTIVITY_GIFT;
			SELECT S_ES_ACTIVITY_GIFT.NEXTVAL INTO :NEW."ID" FROM DUAL;
			IF MAXID>:NEW."ID" THEN
				LOOP
					SELECT S_ES_ACTIVITY_GIFT.NEXTVAL INTO :NEW."ID" FROM DUAL;
					EXIT WHEN MAXID<:NEW."ID";
				END LOOP;
			END IF;
		END IF;
	EXCEPTION
		WHEN INTEGRITY_ERROR THEN
			RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;

--创建es_activity_goods
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ACTIVITY_GOODS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_ACTIVITY_GOODS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ACTIVITY_GOODS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TABLE ES_ACTIVITY_GOODS (
	ID NUMBER(11) NOT NULL,
 	ACTIVITY_ID NUMBER(11) NOT NULL,
  GOODS_ID NUMBER(11) NOT NULL,
  PRIMARY KEY (ID)
)

CREATE SEQUENCE S_ES_ACTIVITY_GOODS

CREATE TRIGGER "TIB_ES_ACTIVITY_GOODS" BEFORE INSERT
	ON ES_ACTIVITY_GOODS FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID						 INTEGER;
	BEGIN
		IF :NEW."ID" IS NULL THEN
			SELECT MAX("ID") INTO MAXID FROM ES_ACTIVITY_GOODS;
			SELECT S_ES_ACTIVITY_GOODS.NEXTVAL INTO :NEW."ID" FROM DUAL;
			IF MAXID>:NEW."ID" THEN
				LOOP
					SELECT S_ES_ACTIVITY_GOODS.NEXTVAL INTO :NEW."ID" FROM DUAL;
					EXIT WHEN MAXID<:NEW."ID";
				END LOOP;
			END IF;
		END IF;
	EXCEPTION
		WHEN INTEGRITY_ERROR THEN
			RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;