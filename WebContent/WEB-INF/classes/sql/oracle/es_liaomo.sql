--创建es_liaomo_group表
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_LIAOMO_GROUP';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_LIAOMO_GROUP';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_LIAOMO_GROUP';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TABLE ES_LIAOMO_GROUP (
  ID NUMBER(11) NOT NULL,
  SN VARCHAR(10) NOT NULL, /*组编号*/
  NAME VARCHAR(100) NOT NULL COMMENT /*组名称*/,
  AVATOR VARCHAR(100) DEFAULT NULL COMMENT /*组头像*/,
	DESCRIPTION VARCHAR(200) DEFAULT NULL COMMENT /*组描述*/,
	CREATOR NUMBER(11) NOT NULL COMMENT /*创建者*/,
	COUNT NUMBER(11) NOT NULL COMMENT /*组人数*/,
  PRIMARY KEY (ID)
);

CREATE SEQUENCE S_ES_LIAOMO_GROUP;

CREATE TRIGGER "TIB_ES_LIAOMO_GROUP" BEFORE INSERT
	ON ES_LIAOMO_GROUP FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID						 INTEGER;
	BEGIN
		IF :NEW."ID" IS NULL THEN
			SELECT MAX("ID") INTO MAXID FROM ES_LIAOMO_GROUP;
			SELECT S_ES_LIAOMO_GROUP.NEXTVAL INTO :NEW."ID" FROM DUAL;
			IF MAXID>:NEW."ID" THEN
				LOOP
					SELECT S_ES_LIAOMO_GROUP.NEXTVAL INTO :NEW."ID" FROM DUAL;
					EXIT WHEN MAXID<:NEW."ID";
				END LOOP;
			END IF;
		END IF;
	EXCEPTION
		WHEN INTEGRITY_ERROR THEN
			RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;

--创建ES_LIAOMO_GROUP_MEMBER表
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_LIAOMO_GROUP_MEMBER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_LIAOMO_GROUP_MEMBER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_LIAOMO_GROUP_MEMBER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TABLE ES_LIAOMO_GROUP_MEMBER (
  ID NUMBER(11) NOT NULL,
  GROUP_ID NUMBER(11) NOT NULL,
  MEMBER_ID NUMBER(11) NOT NULL,
  PRIMARY KEY (ID)
);

CREATE SEQUENCE S_ES_LIAOMO_GROUP_MEMBER;

CREATE TRIGGER "TIB_ES_LIAOMO_GROUP_MEMBER" BEFORE INSERT
	ON ES_LIAOMO_GROUP_MEMBER FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID						 INTEGER;
	BEGIN
		IF :NEW."ID" IS NULL THEN
			SELECT MAX("ID") INTO MAXID FROM ES_LIAOMO_GROUP_MEMBER;
			SELECT S_ES_LIAOMO_GROUP_MEMBER.NEXTVAL INTO :NEW."ID" FROM DUAL;
			IF MAXID>:NEW."ID" THEN
				LOOP
					SELECT S_ES_LIAOMO_GROUP_MEMBER.NEXTVAL INTO :NEW."ID" FROM DUAL;
					EXIT WHEN MAXID<:NEW."ID";
				END LOOP;
			END IF;
		END IF;
	EXCEPTION
		WHEN INTEGRITY_ERROR THEN
			RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;

--创建es_liaomo_circle表
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_LIAOMO_CIRCLE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_LIAOMO_CIRCLE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_LIAOMO_CIRCLE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TABLE ES_LIAOMO_CIRCLE (
  ID NUMBER(11) NOT NULL,
  MEMBER_ID NUMBER(11) NOT NULL,
  CONTENT VARCHAR(2000) DEFAULT NULL,
  PRIMARY KEY (ID)
);

CREATE SEQUENCE S_ES_LIAOMO_CIRCLE;

CREATE TRIGGER "TIB_ES_LIAOMO_CIRCLE" BEFORE INSERT
	ON ES_LIAOMO_CIRCLE FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID						 INTEGER;
	BEGIN
		IF :NEW."ID" IS NULL THEN
			SELECT MAX("ID") INTO MAXID FROM ES_LIAOMO_CIRCLE;
			SELECT S_ES_LIAOMO_CIRCLE.NEXTVAL INTO :NEW."ID" FROM DUAL;
			IF MAXID>:NEW."ID" THEN
				LOOP
					SELECT S_ES_LIAOMO_CIRCLE.NEXTVAL INTO :NEW."ID" FROM DUAL;
					EXIT WHEN MAXID<:NEW."ID";
				END LOOP;
			END IF;
		END IF;
	EXCEPTION
		WHEN INTEGRITY_ERROR THEN
			RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;

--创建es_liaomo_circle_image表
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_LIAOMO_CIRCLE_IMAGE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_LIAOMO_CIRCLE_IMAGE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_LIAOMO_CIRCLE_IMAGE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TABLE ES_LIAOMO_CIRCLE_IMAGE (
  ID NUMBER(11) NOT NULL,
  CIRCLE_ID NUMBER(11) NOT NULL,
  IMAGE VARCHAR(2000) NOT NULL,
  PRIMARY KEY (ID)
);

CREATE SEQUENCE S_ES_LIAOMO_CIRCLE_IMAGE;

CREATE TRIGGER "TIB_ES_LIAOMO_CIRCLE_IMAGE" BEFORE INSERT
	ON ES_LIAOMO_CIRCLE_IMAGE FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID						 INTEGER;
	BEGIN
		IF :NEW."ID" IS NULL THEN
			SELECT MAX("ID") INTO MAXID FROM ES_LIAOMO_CIRCLE_IMAGE;
			SELECT S_ES_LIAOMO_CIRCLE_IMAGE.NEXTVAL INTO :NEW."ID" FROM DUAL;
			IF MAXID>:NEW."ID" THEN
				LOOP
					SELECT S_ES_LIAOMO_CIRCLE_IMAGE.NEXTVAL INTO :NEW."ID" FROM DUAL;
					EXIT WHEN MAXID<:NEW."ID";
				END LOOP;
			END IF;
		END IF;
	EXCEPTION
		WHEN INTEGRITY_ERROR THEN
			RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;

--创建ES_LIAOMO_CIRCLE_REPLY表
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_LIAOMO_CIRCLE_REPLY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_LIAOMO_CIRCLE_REPLY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_LIAOMO_CIRCLE_REPLY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TABLE ES_LIAOMO_CIRCLE_REPLY (
  ID NUMBER(11) NOT NULL,
  CIRCLE_ID NUMBER(11) NOT NULL,
 	REPLY VARCHAR(2000),
 	PRIMARY KEY (ID)
);

CREATE SEQUENCE S_ES_LIAOMO_CIRCLE_REPLY;

CREATE TRIGGER "TIB_ES_LIAOMO_CIRCLE_REPLY" BEFORE INSERT
	ON ES_LIAOMO_CIRCLE_REPLY FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID						 INTEGER;
	BEGIN
		IF :NEW."ID" IS NULL THEN
			SELECT MAX("ID") INTO MAXID FROM ES_LIAOMO_CIRCLE_REPLY;
			SELECT S_ES_LIAOMO_CIRCLE_REPLY.NEXTVAL INTO :NEW."ID" FROM DUAL;
			IF MAXID>:NEW."ID" THEN
				LOOP
					SELECT S_ES_LIAOMO_CIRCLE_REPLY.NEXTVAL INTO :NEW."ID" FROM DUAL;
					EXIT WHEN MAXID<:NEW."ID";
				END LOOP;
			END IF;
		END IF;
	EXCEPTION
		WHEN INTEGRITY_ERROR THEN
			RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;

--创建ES_LIAOMO_FRIEND表
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_LIAOMO_FRIEND';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_LIAOMO_FRIEND';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_LIAOMO_FRIEND';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TABLE ES_LIAOMO_FRIEND (
  ID NUMBER(11) NOT NULL,
  MEMBER_ID NUMBER(11) NOT NULL,
  FRIEND_ID NUMBER(11) NOT NULL,
  PRIMARY KEY (ID)
);

CREATE SEQUENCE S_ES_LIAOMO_FRIEND;

CREATE TRIGGER "TIB_ES_LIAOMO_FRIEND" BEFORE INSERT
	ON ES_LIAOMO_FRIEND FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID						 INTEGER;
	BEGIN
		IF :NEW."ID" IS NULL THEN
			SELECT MAX("ID") INTO MAXID FROM ES_LIAOMO_FRIEND;
			SELECT S_ES_LIAOMO_FRIEND.NEXTVAL INTO :NEW."ID" FROM DUAL;
			IF MAXID>:NEW."ID" THEN
				LOOP
					SELECT S_ES_LIAOMO_FRIEND.NEXTVAL INTO :NEW."ID" FROM DUAL;
					EXIT WHEN MAXID<:NEW."ID";
				END LOOP;
			END IF;
		END IF;
	EXCEPTION
		WHEN INTEGRITY_ERROR THEN
			RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;

--创建ES_LIAOMO_MESSAGE表
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_LIAOMO_MESSAGE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_LIAOMO_MESSAGE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_LIAOMO_MESSAGE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TABLE ES_LIAOMO_MESSAGE (
  ID NUMBER(11) NOT NULL,
  SENDER NUMBER(11) NOT NULL,
  CONTENT_TYPE NUMBER(1) NOT NULL,
  CONTENT VARCHAR(2000) NOT NULL,
 	CREATED_ON NUMBER(20,0) NOT NULL,
 	GROUP_ID NUMBER(11) DEFAULT NULL,
 	RECEIVER NUMBER(11) DEFAULT NULL,
  PRIMARY KEY (ID)
);

CREATE SEQUENCE S_ES_LIAOMO_MESSAGE;

CREATE TRIGGER "TIB_ES_LIAOMO_MESSAGE" BEFORE INSERT
	ON ES_LIAOMO_MESSAGE FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID						 INTEGER;
	BEGIN
		IF :NEW."ID" IS NULL THEN
			SELECT MAX("ID") INTO MAXID FROM ES_LIAOMO_MESSAGE;
			SELECT S_ES_LIAOMO_MESSAGE.NEXTVAL INTO :NEW."ID" FROM DUAL;
			IF MAXID>:NEW."ID" THEN
				LOOP
					SELECT S_ES_LIAOMO_MESSAGE.NEXTVAL INTO :NEW."ID" FROM DUAL;
					EXIT WHEN MAXID<:NEW."ID";
				END LOOP;
			END IF;
		END IF;
	EXCEPTION
		WHEN INTEGRITY_ERROR THEN
			RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;

--创建ES_LIAOMO_READ_MESSAGE表
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_LIAOMO_READ_MESSAGE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_LIAOMO_READ_MESSAGE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_LIAOMO_READ_MESSAGE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TABLE ES_LIAOMO_READ_MESSAGE (
  ID NUMBER(11) NOT NULL,
  SENDER NUMBER(11) NOT NULL,
  CONTENT_TYPE NUMBER(1) NOT NULL,
  CONTENT VARCHAR(2000) NOT NULL,
 	CREATED_ON NUMBER(20,0) NOT NULL,
 	GROUP_ID NUMBER(11) DEFAULT NULL,
 	RECEIVER NUMBER(11) NOT NULL,
  PRIMARY KEY (ID)
);

CREATE SEQUENCE S_ES_LIAOMO_READ_MESSAGE;

CREATE TRIGGER "TIB_ES_LIAOMO_READ_MESSAGE" BEFORE INSERT
	ON ES_LIAOMO_READ_MESSAGE FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID						 INTEGER;
	BEGIN
		IF :NEW."ID" IS NULL THEN
			SELECT MAX("ID") INTO MAXID FROM ES_LIAOMO_READ_MESSAGE;
			SELECT S_ES_LIAOMO_READ_MESSAGE.NEXTVAL INTO :NEW."ID" FROM DUAL;
			IF MAXID>:NEW."ID" THEN
				LOOP
					SELECT S_ES_LIAOMO_READ_MESSAGE.NEXTVAL INTO :NEW."ID" FROM DUAL;
					EXIT WHEN MAXID<:NEW."ID";
				END LOOP;
			END IF;
		END IF;
	EXCEPTION
		WHEN INTEGRITY_ERROR THEN
			RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;

--创建ES_LIAOMO_MESSAGE表
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_LIAOMO_MESSAGE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_LIAOMO_MESSAGE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_LIAOMO_MESSAGE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TABLE ES_LIAOMO_MESSAGE (
  ID NUMBER(11) NOT NULL,
  SENDER NUMBER(11) NOT NULL,
  CONTENT_TYPE NUMBER(1) NOT NULL,
  CONTENT VARCHAR(2000) NOT NULL,
 	CREATED_ON NUMBER(20,0) NOT NULL,
 	GROUP_ID NUMBER(11) DEFAULT NULL,
 	RECEIVER NUMBER(11) DEFAULT NULL,
  PRIMARY KEY (ID)
);

CREATE SEQUENCE S_ES_LIAOMO_MESSAGE;

CREATE TRIGGER "TIB_ES_LIAOMO_MESSAGE" BEFORE INSERT
	ON ES_LIAOMO_MESSAGE FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID						 INTEGER;
	BEGIN
		IF :NEW."ID" IS NULL THEN
			SELECT MAX("ID") INTO MAXID FROM ES_LIAOMO_MESSAGE;
			SELECT S_ES_LIAOMO_MESSAGE.NEXTVAL INTO :NEW."ID" FROM DUAL;
			IF MAXID>:NEW."ID" THEN
				LOOP
					SELECT S_ES_LIAOMO_MESSAGE.NEXTVAL INTO :NEW."ID" FROM DUAL;
					EXIT WHEN MAXID<:NEW."ID";
				END LOOP;
			END IF;
		END IF;
	EXCEPTION
		WHEN INTEGRITY_ERROR THEN
			RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;