BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_EOP_APP';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE EOP_APP';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_EOP_APP';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE EOP_APP ("ID" NUMBER(11) NOT NULL,"APPID" VARCHAR(50),"APP_NAME" VARCHAR(50),"AUTHOR" VARCHAR(50),"DESCRIPT" CLOB,"DEPLOYMENT" NUMBER(11) default 1,"PATH" VARCHAR(255),"AUTHORIZATIONCODE" VARCHAR(50),"INSTALLURI" VARCHAR(255),"DELETEFLAG" NUMBER(6) default 0,"VERSION" VARCHAR(255),CONSTRAINT PK_EOP_APP PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_EOP_APP';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_EOP_APP

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_EOP_APP';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_EOP_APP" BEFORE INSERT
	ON EOP_APP FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM EOP_APP;
		SELECT S_EOP_APP.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_EOP_APP.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_EOP_APP';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_EOP_APP';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_EOP_APP';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_EOP_APP ("ID" NUMBER(11) NOT NULL,"APPID" VARCHAR(50),"APP_NAME" VARCHAR(50),"AUTHOR" VARCHAR(50),"DESCRIPT" CLOB,"DEPLOYMENT" NUMBER(11) default 1,"PATH" VARCHAR(255),"AUTHORIZATIONCODE" VARCHAR(50),"INSTALLURI" VARCHAR(255),"DELETEFLAG" NUMBER(6) default 0,"VERSION" VARCHAR(255),CONSTRAINT PK_ES_EOP_APP PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_EOP_APP';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_EOP_APP

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_EOP_APP';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_EOP_APP" BEFORE INSERT
	ON ES_EOP_APP FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_EOP_APP;
		SELECT S_ES_EOP_APP.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_EOP_APP.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;


BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ADV';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_ADV';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ADV';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_ADV ("AID" NUMBER(20) NOT NULL,"ACID" NUMBER(20),"ATYPE" NUMBER(11),"BEGINTIME" NUMBER(20),"ENDTIME" NUMBER(20),"ISCLOSE" NUMBER(11),"ATTACHMENT" VARCHAR(50),"ATTURL" VARCHAR(255),"URL" VARCHAR(255),"ANAME" VARCHAR(255),"CLICKCOUNT" NUMBER(11) default 0,"LINKMAN" VARCHAR(50),"COMPANY" VARCHAR(255),"CONTACT" VARCHAR(255),"DISABLED" VARCHAR(5) default 'false',CONSTRAINT PK_ES_ADV PRIMARY KEY ("AID"))
CREATE SEQUENCE S_ES_ADV;
CREATE TRIGGER "TIB_ES_ADV" BEFORE INSERT
	ON ES_ADV FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."AID" IS NULL THEN
		SELECT MAX("AID") INTO MAXID FROM ES_ADV;
		SELECT S_ES_ADV.NEXTVAL INTO :NEW."AID" FROM DUAL;
		IF MAXID>:NEW."AID" THEN
			LOOP
				SELECT S_ES_ADV.NEXTVAL INTO :NEW."AID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."AID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;





BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ADCOLUMN';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_ADCOLUMN';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ADCOLUMN';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_ADCOLUMN ("ACID" NUMBER(11) NOT NULL,"CNAME" VARCHAR(255),"WIDTH" VARCHAR(50),"HEIGHT" VARCHAR(50),"DESCRIPTION" VARCHAR(255),"ANUMBER" NUMBER(20),"ATYPE" NUMBER(11),"ARULE" NUMBER(20),"DISABLED" VARCHAR(5) default 'false',CONSTRAINT PK_ES_ADCOLUMN PRIMARY KEY ("ACID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ADCOLUMN';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_ADCOLUMN

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ADCOLUMN';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_ADCOLUMN" BEFORE INSERT
	ON ES_ADCOLUMN FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ACID" IS NULL THEN
		SELECT MAX("ACID") INTO MAXID FROM ES_ADCOLUMN;
		SELECT S_ES_ADCOLUMN.NEXTVAL INTO :NEW."ACID" FROM DUAL;
		IF MAXID>:NEW."ACID" THEN
			LOOP
				SELECT S_ES_ADCOLUMN.NEXTVAL INTO :NEW."ACID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ACID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ADMINTHEME';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_ADMINTHEME';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ADMINTHEME';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_ADMINTHEME ("ID" NUMBER(11) NOT NULL,"APPID" VARCHAR(50),"SITEID" NUMBER(11),"THEMENAME" VARCHAR(50),"PATH" VARCHAR(255),"USERID" NUMBER(11),"AUTHOR" VARCHAR(50),"VERSION" VARCHAR(50),"FRAMEMODE" NUMBER(6) default 0,"DELETEFLAG" NUMBER(6) default 0,"THUMB" VARCHAR(50),CONSTRAINT PK_ES_ADMINTHEME PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ADMINTHEME';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_ADMINTHEME

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ADMINTHEME';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_ADMINTHEME" BEFORE INSERT
	ON ES_ADMINTHEME FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_ADMINTHEME;
		SELECT S_ES_ADMINTHEME.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_ADMINTHEME.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_FRIENDS_LINK';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_FRIENDS_LINK';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_FRIENDS_LINK';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_FRIENDS_LINK ("LINK_ID" NUMBER(8) NOT NULL,"NAME" VARCHAR(100),"URL" VARCHAR(100),"LOGO" VARCHAR(255),"SORT" NUMBER(2),CONSTRAINT PK_ES_FRIENDS_LINK PRIMARY KEY ("LINK_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_FRIENDS_LINK';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_FRIENDS_LINK

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_FRIENDS_LINK';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_FRIENDS_LINK" BEFORE INSERT
	ON ES_FRIENDS_LINK FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."LINK_ID" IS NULL THEN
		SELECT MAX("LINK_ID") INTO MAXID FROM ES_FRIENDS_LINK;
		SELECT S_ES_FRIENDS_LINK.NEXTVAL INTO :NEW."LINK_ID" FROM DUAL;
		IF MAXID>:NEW."LINK_ID" THEN
			LOOP
				SELECT S_ES_FRIENDS_LINK.NEXTVAL INTO :NEW."LINK_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."LINK_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_SETTINGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_SETTINGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_SETTINGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_SETTINGS ("ID" NUMBER(8) NOT NULL,"CODE" VARCHAR(50),"CFG_VALUE" VARCHAR(1000),"CFG_GROUP" VARCHAR(50),CONSTRAINT PK_ES_SETTINGS PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_SETTINGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_SETTINGS

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_SETTINGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_SETTINGS" BEFORE INSERT
	ON ES_SETTINGS FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_SETTINGS;
		SELECT S_ES_SETTINGS.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_SETTINGS.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_SITE_MENU';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_SITE_MENU';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_SITE_MENU';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_SITE_MENU ("MENUID" NUMBER(8) NOT NULL,"PARENTID" NUMBER(8),"NAME" VARCHAR(50),"URL" VARCHAR(255),"TARGET" VARCHAR(255),"SORT" NUMBER(11),CONSTRAINT PK_ES_SITE_MENU PRIMARY KEY ("MENUID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_SITE_MENU';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_SITE_MENU

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_SITE_MENU';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_SITE_MENU" BEFORE INSERT
	ON ES_SITE_MENU FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."MENUID" IS NULL THEN
		SELECT MAX("MENUID") INTO MAXID FROM ES_SITE_MENU;
		SELECT S_ES_SITE_MENU.NEXTVAL INTO :NEW."MENUID" FROM DUAL;
		IF MAXID>:NEW."MENUID" THEN
			LOOP
				SELECT S_ES_SITE_MENU.NEXTVAL INTO :NEW."MENUID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."MENUID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GUESTBOOK';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_GUESTBOOK';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GUESTBOOK';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_GUESTBOOK ("ID" NUMBER(8) NOT NULL,"TITLE" VARCHAR(255),"CONTENT" CLOB,"PARENTID" NUMBER(8),"DATELINE" NUMBER(20),"ISSUBJECT" NUMBER(2),"USERNAME" VARCHAR(255),"EMAIL" VARCHAR(255),"QQ" VARCHAR(255),"TEL" VARCHAR(255),"SEX" NUMBER(2),"IP" VARCHAR(255),"AREA" VARCHAR(255),CONSTRAINT PK_ES_GUESTBOOK PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GUESTBOOK';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_GUESTBOOK

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GUESTBOOK';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_GUESTBOOK" BEFORE INSERT
	ON ES_GUESTBOOK FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_GUESTBOOK;
		SELECT S_ES_GUESTBOOK.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_GUESTBOOK.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ACCESS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_ACCESS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ACCESS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_ACCESS ("ID" NUMBER(9) NOT NULL,"IP" VARCHAR(255),"URL" VARCHAR(1000),"PAGE" VARCHAR(255),"AREA" VARCHAR(255),"ACCESS_TIME" NUMBER(11),"STAY_TIME" NUMBER(11),"POINT" NUMBER(11) default 0,"MEMBERNAME" VARCHAR(255) default '0',CONSTRAINT PK_ES_ACCESS PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ACCESS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_ACCESS

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ACCESS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_ACCESS" BEFORE INSERT
	ON ES_ACCESS FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_ACCESS;
		SELECT S_ES_ACCESS.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_ACCESS.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_MENU';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_MENU';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_MENU';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_MENU ("ID" NUMBER(11) NOT NULL,"APPID" VARCHAR(50),"PID" NUMBER(11),"TITLE" VARCHAR(50),"URL" VARCHAR(255),"TARGET" VARCHAR(255),"SORDER" NUMBER(11) default 50,"MENUTYPE" NUMBER(11),"DATATYPE" VARCHAR(50),"SELECTED" NUMBER(6) default 0,"DELETEFLAG" NUMBER(6) default 0,"CANEXP" NUMBER(6) default 0,"ICON" VARCHAR(255),"ICON_HOVER" VARCHAR(255),CONSTRAINT PK_ES_MENU PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_MENU';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_MENU

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_MENU';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_MENU" BEFORE INSERT
	ON ES_MENU FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_MENU;
		SELECT S_ES_MENU.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_MENU.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ROLE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_ROLE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ROLE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_ROLE ("ROLEID" NUMBER(11) NOT NULL,"ROLENAME" VARCHAR(255),"ROLEMEMO" VARCHAR(255),CONSTRAINT PK_ES_ROLE PRIMARY KEY ("ROLEID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ROLE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_ROLE

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ROLE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_ROLE" BEFORE INSERT
	ON ES_ROLE FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ROLEID" IS NULL THEN
		SELECT MAX("ROLEID") INTO MAXID FROM ES_ROLE;
		SELECT S_ES_ROLE.NEXTVAL INTO :NEW."ROLEID" FROM DUAL;
		IF MAXID>:NEW."ROLEID" THEN
			LOOP
				SELECT S_ES_ROLE.NEXTVAL INTO :NEW."ROLEID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ROLEID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ADMINUSER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_ADMINUSER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ADMINUSER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_ADMINUSER ("USERID" NUMBER(11) NOT NULL,"USERNAME" VARCHAR(255),"PASSWORD" VARCHAR(255),"STATE" NUMBER(6),"REALNAME" VARCHAR(255),"USERNO" VARCHAR(255),"USERDEPT" VARCHAR(255),"REMARK" VARCHAR(255),"DATELINE" NUMBER(11),"FOUNDER" NUMBER(2),"SITEID" NUMBER(11),CONSTRAINT PK_ES_ADMINUSER PRIMARY KEY ("USERID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ADMINUSER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_ADMINUSER

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ADMINUSER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_ADMINUSER" BEFORE INSERT
	ON ES_ADMINUSER FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."USERID" IS NULL THEN
		SELECT MAX("USERID") INTO MAXID FROM ES_ADMINUSER;
		SELECT S_ES_ADMINUSER.NEXTVAL INTO :NEW."USERID" FROM DUAL;
		IF MAXID>:NEW."USERID" THEN
			LOOP
				SELECT S_ES_ADMINUSER.NEXTVAL INTO :NEW."USERID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."USERID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ROLE_AUTH';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_ROLE_AUTH';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ROLE_AUTH';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_ROLE_AUTH ("ID" NUMBER(11) NOT NULL,"ROLEID" NUMBER(11),"AUTHID" NUMBER(11),CONSTRAINT PK_ES_ROLE_AUTH PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ROLE_AUTH';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_ROLE_AUTH

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ROLE_AUTH';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_ROLE_AUTH" BEFORE INSERT
	ON ES_ROLE_AUTH FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_ROLE_AUTH;
		SELECT S_ES_ROLE_AUTH.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_ROLE_AUTH.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_SITE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_SITE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_SITE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_SITE ("SITEID" NUMBER(11) NOT NULL,"PARENTID" NUMBER(11),"CODE" NUMBER(11),"NAME" VARCHAR(255),"DOMAIN" VARCHAR(255),"THEMEID" NUMBER(11),"SITELEVEL" NUMBER(11),CONSTRAINT PK_ES_SITE PRIMARY KEY ("SITEID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_SITE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_SITE

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_SITE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_SITE" BEFORE INSERT
	ON ES_SITE FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."SITEID" IS NULL THEN
		SELECT MAX("SITEID") INTO MAXID FROM ES_SITE;
		SELECT S_ES_SITE.NEXTVAL INTO :NEW."SITEID" FROM DUAL;
		IF MAXID>:NEW."SITEID" THEN
			LOOP
				SELECT S_ES_SITE.NEXTVAL INTO :NEW."SITEID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."SITEID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_USER_ROLE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_USER_ROLE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_USER_ROLE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_USER_ROLE ("ID" NUMBER(11) NOT NULL,"USERID" NUMBER(11),"ROLEID" NUMBER(11),CONSTRAINT PK_ES_USER_ROLE PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_USER_ROLE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_USER_ROLE

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_USER_ROLE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_USER_ROLE" BEFORE INSERT
	ON ES_USER_ROLE FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_USER_ROLE;
		SELECT S_ES_USER_ROLE.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_USER_ROLE.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_AUTH_ACTION';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_AUTH_ACTION';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_AUTH_ACTION';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_AUTH_ACTION ("ACTID" NUMBER(11) NOT NULL,"NAME" VARCHAR(255),"TYPE" VARCHAR(255),"OBJVALUE" CLOB,"CHOOSE" NUMBER(11),CONSTRAINT PK_ES_AUTH_ACTION PRIMARY KEY ("ACTID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_AUTH_ACTION';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_AUTH_ACTION

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_AUTH_ACTION';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_AUTH_ACTION" BEFORE INSERT
	ON ES_AUTH_ACTION FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ACTID" IS NULL THEN
		SELECT MAX("ACTID") INTO MAXID FROM ES_AUTH_ACTION;
		SELECT S_ES_AUTH_ACTION.NEXTVAL INTO :NEW."ACTID" FROM DUAL;
		IF MAXID>:NEW."ACTID" THEN
			LOOP
				SELECT S_ES_AUTH_ACTION.NEXTVAL INTO :NEW."ACTID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ACTID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_THEME';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_THEME';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_THEME';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_THEME ("ID" NUMBER(11) NOT NULL,"APPID" VARCHAR(50),"THEMENAME" VARCHAR(50),"PATH" VARCHAR(255),"AUTHOR" VARCHAR(50),"VERSION" VARCHAR(50),"DELETEFLAG" NUMBER(6) default 0,"THUMB" VARCHAR(50),"SITEID" NUMBER(11),CONSTRAINT PK_ES_THEME PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_THEME';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_THEME

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_THEME';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_THEME" BEFORE INSERT
	ON ES_THEME FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_THEME;
		SELECT S_ES_THEME.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_THEME.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_THEMEURI';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_THEMEURI';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_THEMEURI';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_THEMEURI ("ID" NUMBER(11) NOT NULL,"THEMEID" NUMBER(11),"URI" VARCHAR(255),"PATH" VARCHAR(255),"DELETEFLAG" NUMBER(6) default 0,"PAGENAME" VARCHAR(255),"POINT" NUMBER(11),"SITEMAPTYPE" NUMBER(11) default 0,"KEYWORDS" VARCHAR(255),"DESCRIPTION" CLOB,"HTTPCACHE" NUMBER(2) default 0,CONSTRAINT PK_ES_THEMEURI PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_THEMEURI';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_THEMEURI

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_THEMEURI';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_THEMEURI" BEFORE INSERT
	ON ES_THEMEURI FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_THEMEURI;
		SELECT S_ES_THEMEURI.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_THEMEURI.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_INDEX_ITEM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_INDEX_ITEM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_INDEX_ITEM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_INDEX_ITEM ("ID" NUMBER(11) NOT NULL,"TITLE" VARCHAR(255),"URL" VARCHAR(255),"SORT" NUMBER(11),CONSTRAINT PK_ES_INDEX_ITEM PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_INDEX_ITEM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_INDEX_ITEM

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_INDEX_ITEM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_INDEX_ITEM" BEFORE INSERT
	ON ES_INDEX_ITEM FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_INDEX_ITEM;
		SELECT S_ES_INDEX_ITEM.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_INDEX_ITEM.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_SMTP';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_SMTP';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_SMTP';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_SMTP ("ID" NUMBER(11) NOT NULL,"HOST" VARCHAR(50),"USERNAME" VARCHAR(255),"PASSWORD" VARCHAR(255),"LAST_SEND_TIME" NUMBER(20),"SEND_COUNT" NUMBER(11) default 0,"MAX_COUNT" NUMBER(11),"MAIL_FROM" VARCHAR(255),CONSTRAINT PK_ES_SMTP PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_SMTP';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_SMTP

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_SMTP';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_SMTP" BEFORE INSERT
	ON ES_SMTP FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_SMTP;
		SELECT S_ES_SMTP.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_SMTP.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_REGIONS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_REGIONS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_REGIONS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_REGIONS ("REGION_ID" NUMBER(10) NOT NULL,"P_REGION_ID" NUMBER(10),"REGION_PATH" VARCHAR(255),"REGION_GRADE" NUMBER(8),"LOCAL_NAME" VARCHAR(100) NOT NULL,"ZIPCODE" VARCHAR(20),"COD" VARCHAR(4),CONSTRAINT PK_ES_REGIONS PRIMARY KEY ("REGION_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_REGIONS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_REGIONS

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_REGIONS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_REGIONS" BEFORE INSERT
	ON ES_REGIONS FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."REGION_ID" IS NULL THEN
		SELECT MAX("REGION_ID") INTO MAXID FROM ES_REGIONS;
		SELECT S_ES_REGIONS.NEXTVAL INTO :NEW."REGION_ID" FROM DUAL;
		IF MAXID>:NEW."REGION_ID" THEN
			LOOP
				SELECT S_ES_REGIONS.NEXTVAL INTO :NEW."REGION_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."REGION_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_COMPONENT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_COMPONENT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_COMPONENT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_COMPONENT ("ID" NUMBER(11) NOT NULL,"COMPONENTID" VARCHAR(255),"NAME" VARCHAR(255),"INSTALL_STATE" NUMBER(2) default 0,"ENABLE_STATE" NUMBER(2) default 0,"VERSION" VARCHAR(50),"AUTHOR" VARCHAR(255),"JAVASHOP_VERSION" VARCHAR(50),"DESCRIPTION" CLOB,"ERROR_MESSAGE" CLOB,"SORT_ORDER" NUMBER(10),CONSTRAINT PK_ES_COMPONENT PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_COMPONENT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_COMPONENT

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_COMPONENT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_COMPONENT" BEFORE INSERT
	ON ES_COMPONENT FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_COMPONENT;
		SELECT S_ES_COMPONENT.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_COMPONENT.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_DATA_CAT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_DATA_CAT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_DATA_CAT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_DATA_CAT ("CAT_ID" NUMBER(8) NOT NULL,"NAME" VARCHAR(255),"PARENT_ID" NUMBER(8),"CAT_PATH" VARCHAR(255),"CAT_ORDER" NUMBER(5),"MODEL_ID" NUMBER(8),"IF_AUDIT" NUMBER(2),"URL" VARCHAR(255),"DETAIL_URL" VARCHAR(255),"DESCRIPT" CLOB,"TOSITEMAP" NUMBER(8) default 0,CONSTRAINT PK_ES_DATA_CAT PRIMARY KEY ("CAT_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_DATA_CAT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_DATA_CAT

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_DATA_CAT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_DATA_CAT" BEFORE INSERT
	ON ES_DATA_CAT FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."CAT_ID" IS NULL THEN
		SELECT MAX("CAT_ID") INTO MAXID FROM ES_DATA_CAT;
		SELECT S_ES_DATA_CAT.NEXTVAL INTO :NEW."CAT_ID" FROM DUAL;
		IF MAXID>:NEW."CAT_ID" THEN
			LOOP
				SELECT S_ES_DATA_CAT.NEXTVAL INTO :NEW."CAT_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."CAT_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_DATA_FIELD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_DATA_FIELD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_DATA_FIELD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_DATA_FIELD ("FIELD_ID" NUMBER(8) NOT NULL,"CHINA_NAME" VARCHAR(255),"ENGLISH_NAME" VARCHAR(255),"DATA_TYPE" NUMBER(11),"DATA_SIZE" VARCHAR(20),"SHOW_FORM" VARCHAR(255),"SHOW_VALUE" VARCHAR(400),"ADD_TIME" NUMBER(20),"MODEL_ID" NUMBER(8),"SAVE_VALUE" CLOB,"IS_VALIDATE" NUMBER(2),"TAXIS" NUMBER(4),"DICT_ID" NUMBER(8),"IS_SHOW" NUMBER(8),CONSTRAINT PK_ES_DATA_FIELD PRIMARY KEY ("FIELD_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_DATA_FIELD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_DATA_FIELD

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_DATA_FIELD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_DATA_FIELD" BEFORE INSERT
	ON ES_DATA_FIELD FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."FIELD_ID" IS NULL THEN
		SELECT MAX("FIELD_ID") INTO MAXID FROM ES_DATA_FIELD;
		SELECT S_ES_DATA_FIELD.NEXTVAL INTO :NEW."FIELD_ID" FROM DUAL;
		IF MAXID>:NEW."FIELD_ID" THEN
			LOOP
				SELECT S_ES_DATA_FIELD.NEXTVAL INTO :NEW."FIELD_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."FIELD_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_DATA_MODEL';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_DATA_MODEL';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_DATA_MODEL';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_DATA_MODEL ("MODEL_ID" NUMBER(8) NOT NULL,"CHINA_NAME" VARCHAR(255),"ENGLISH_NAME" VARCHAR(255),"ADD_TIME" NUMBER(20),"PROJECT_NAME" VARCHAR(255),"BRIEF" VARCHAR(400),"IF_AUDIT" NUMBER(8),CONSTRAINT PK_ES_DATA_MODEL PRIMARY KEY ("MODEL_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_DATA_MODEL';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_DATA_MODEL

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_DATA_MODEL';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_DATA_MODEL" BEFORE INSERT
	ON ES_DATA_MODEL FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."MODEL_ID" IS NULL THEN
		SELECT MAX("MODEL_ID") INTO MAXID FROM ES_DATA_MODEL;
		SELECT S_ES_DATA_MODEL.NEXTVAL INTO :NEW."MODEL_ID" FROM DUAL;
		IF MAXID>:NEW."MODEL_ID" THEN
			LOOP
				SELECT S_ES_DATA_MODEL.NEXTVAL INTO :NEW."MODEL_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."MODEL_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_HOT_KEYWORD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_HOT_KEYWORD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_HOT_KEYWORD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_HOT_KEYWORD ("ID" NUMBER(11) NOT NULL,"SORT" NUMBER(11),"ADD_TIME" NUMBER(20),"LASTMODIFIED" NUMBER(20),"HIT" NUMBER(20),"ABLE_TIME" NUMBER(20),"STATE" NUMBER(11),"USER_ID" NUMBER(20),"CAT_ID" NUMBER(11),"IS_COMMEND" NUMBER(11),"SYS_LOCK" NUMBER(11) default 0,"PAGE_TITLE" VARCHAR(255),"PAGE_KEYWORDS" VARCHAR(255),"PAGE_DESCRIPTION" CLOB,"SITE_CODE" NUMBER(11) default 100000,"SITEIDLIST" VARCHAR(255),"KEYWORD" VARCHAR(255),"URL" VARCHAR(255),CONSTRAINT PK_ES_HOT_KEYWORD PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_HOT_KEYWORD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_HOT_KEYWORD

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_HOT_KEYWORD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_HOT_KEYWORD" BEFORE INSERT
	ON ES_HOT_KEYWORD FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_HOT_KEYWORD;
		SELECT S_ES_HOT_KEYWORD.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_HOT_KEYWORD.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_HELPCENTER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_HELPCENTER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_HELPCENTER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_HELPCENTER ("ID" NUMBER(10) NOT NULL,"SORT" NUMBER(10),"ADD_TIME" NUMBER(20),"LASTMODIFIED" NUMBER(20),"HIT" NUMBER(20),"ABLE_TIME" NUMBER(20),"STATE" NUMBER(10),"USER_ID" NUMBER(20),"CAT_ID" NUMBER(10),"IS_COMMEND" NUMBER(10),"SYS_LOCK" NUMBER(10) default 0,"PAGE_TITLE" VARCHAR(255),"PAGE_KEYWORDS" VARCHAR(255),"PAGE_DESCRIPTION" CLOB,"SITE_CODE" NUMBER(10) default 100000,"SITEIDLIST" VARCHAR(255),"TITLE" VARCHAR(255),"IMAGE" VARCHAR(255),"CONTENT" CLOB,CONSTRAINT PK_ES_HELPCENTER PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_HELPCENTER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_HELPCENTER

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_HELPCENTER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_HELPCENTER" BEFORE INSERT
	ON ES_HELPCENTER FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_HELPCENTER;
		SELECT S_ES_HELPCENTER.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_HELPCENTER.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GOODS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_GOODS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GOODS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_GOODS ("GOODS_ID" NUMBER(8) NOT NULL,"NAME" VARCHAR(200),"SN" VARCHAR(200),"BRAND_ID" NUMBER(8),"CAT_ID" NUMBER(8),"TYPE_ID" NUMBER(8),"GOODS_TYPE" VARCHAR(6) default 'normal',"UNIT" VARCHAR(20),"WEIGHT" NUMBER(20,2),"MARKET_ENABLE" NUMBER(2),"BRIEF" VARCHAR(255),"INTRO" CLOB,"PRICE" NUMBER(20,2),"COST" NUMBER(20,2),"MKTPRICE" NUMBER(20,2),"PARAMS" CLOB,"SPECS" CLOB,"HAVE_SPEC" NUMBER(2),"ADJUNCTS" CLOB,"CREATE_TIME" NUMBER(20),"LAST_MODIFY" NUMBER(20),"VIEW_COUNT" NUMBER(10),"BUY_COUNT" NUMBER(10),"DISABLED" NUMBER(2),"STORE" NUMBER(8),"ENABLE_STORE" NUMBER(8) default 0,"POINT" NUMBER(8),"PAGE_TITLE" VARCHAR(255),"META_KEYWORDS" VARCHAR(1000),"META_DESCRIPTION" VARCHAR(1000),"P20" VARCHAR(255),"P19" VARCHAR(255),"P18" VARCHAR(255),"P17" VARCHAR(255),"P16" VARCHAR(255),"P15" VARCHAR(255),"P14" VARCHAR(255),"P13" VARCHAR(255),"P12" VARCHAR(255),"P11" VARCHAR(255),"P10" VARCHAR(255),"P9" VARCHAR(255),"P8" VARCHAR(255),"P7" VARCHAR(255),"P6" VARCHAR(255),"P5" VARCHAR(255),"P4" VARCHAR(255),"P3" VARCHAR(255),"P2" VARCHAR(255),"P1" VARCHAR(255),"SORD" NUMBER(10) default 0,"HAVE_FIELD" NUMBER(2) default 0,"GRADE" NUMBER(10) default 0,"GOODS_COMMENT" CLOB,"IS_PACK" NUMBER(2) default 0,CONSTRAINT PK_ES_GOODS PRIMARY KEY ("GOODS_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GOODS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_GOODS

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GOODS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_GOODS" BEFORE INSERT
	ON ES_GOODS FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."GOODS_ID" IS NULL THEN
		SELECT MAX("GOODS_ID") INTO MAXID FROM ES_GOODS;
		SELECT S_ES_GOODS.NEXTVAL INTO :NEW."GOODS_ID" FROM DUAL;
		IF MAXID>:NEW."GOODS_ID" THEN
			LOOP
				SELECT S_ES_GOODS.NEXTVAL INTO :NEW."GOODS_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."GOODS_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GOODS_SPEC';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_GOODS_SPEC';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GOODS_SPEC';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_GOODS_SPEC ("ID" NUMBER(8) NOT NULL,"SPEC_ID" NUMBER(8),"SPEC_VALUE_ID" NUMBER(8),"GOODS_ID" NUMBER(8),"PRODUCT_ID" NUMBER(8),CONSTRAINT PK_ES_GOODS_SPEC PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GOODS_SPEC';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_GOODS_SPEC

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GOODS_SPEC';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_GOODS_SPEC" BEFORE INSERT
	ON ES_GOODS_SPEC FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_GOODS_SPEC;
		SELECT S_ES_GOODS_SPEC.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_GOODS_SPEC.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_PRODUCT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_PRODUCT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_PRODUCT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_PRODUCT ("PRODUCT_ID" NUMBER(8) NOT NULL,"GOODS_ID" NUMBER(8),"NAME" VARCHAR(255),"SN" VARCHAR(50),"STORE" NUMBER(8),"ENABLE_STORE" NUMBER(8) default 0,"PRICE" NUMBER(20,2),"SPECS" CLOB,"COST" NUMBER(20,2),"WEIGHT" NUMBER(20,2),"IS_PACK" NUMBER(2) default 0,CONSTRAINT PK_ES_PRODUCT PRIMARY KEY ("PRODUCT_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_PRODUCT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_PRODUCT

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_PRODUCT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_PRODUCT" BEFORE INSERT
	ON ES_PRODUCT FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."PRODUCT_ID" IS NULL THEN
		SELECT MAX("PRODUCT_ID") INTO MAXID FROM ES_PRODUCT;
		SELECT S_ES_PRODUCT.NEXTVAL INTO :NEW."PRODUCT_ID" FROM DUAL;
		IF MAXID>:NEW."PRODUCT_ID" THEN
			LOOP
				SELECT S_ES_PRODUCT.NEXTVAL INTO :NEW."PRODUCT_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."PRODUCT_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GOODS_CAT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_GOODS_CAT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GOODS_CAT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_GOODS_CAT ("CAT_ID" NUMBER(8) NOT NULL,"NAME" VARCHAR(200),"PARENT_ID" NUMBER(8),"CAT_PATH" VARCHAR(200),"GOODS_COUNT" NUMBER(8),"CAT_ORDER" NUMBER(5),"TYPE_ID" NUMBER(8),"LIST_SHOW" VARCHAR(1) default '1',"IMAGE" VARCHAR(255),CONSTRAINT PK_ES_GOODS_CAT PRIMARY KEY ("CAT_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GOODS_CAT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_GOODS_CAT

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GOODS_CAT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_GOODS_CAT" BEFORE INSERT
	ON ES_GOODS_CAT FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."CAT_ID" IS NULL THEN
		SELECT MAX("CAT_ID") INTO MAXID FROM ES_GOODS_CAT;
		SELECT S_ES_GOODS_CAT.NEXTVAL INTO :NEW."CAT_ID" FROM DUAL;
		IF MAXID>:NEW."CAT_ID" THEN
			LOOP
				SELECT S_ES_GOODS_CAT.NEXTVAL INTO :NEW."CAT_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."CAT_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_BRAND';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_BRAND';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_BRAND';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_BRAND ("BRAND_ID" NUMBER(8) NOT NULL,"NAME" VARCHAR(50),"LOGO" VARCHAR(255),"KEYWORDS" CLOB,"BRIEF" CLOB,"URL" VARCHAR(255),"DISABLED" NUMBER(2),CONSTRAINT PK_ES_BRAND PRIMARY KEY ("BRAND_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_BRAND';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_BRAND

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_BRAND';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_BRAND" BEFORE INSERT
	ON ES_BRAND FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."BRAND_ID" IS NULL THEN
		SELECT MAX("BRAND_ID") INTO MAXID FROM ES_BRAND;
		SELECT S_ES_BRAND.NEXTVAL INTO :NEW."BRAND_ID" FROM DUAL;
		IF MAXID>:NEW."BRAND_ID" THEN
			LOOP
				SELECT S_ES_BRAND.NEXTVAL INTO :NEW."BRAND_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."BRAND_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GOODS_TYPE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_GOODS_TYPE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GOODS_TYPE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_GOODS_TYPE ("TYPE_ID" NUMBER(8) NOT NULL,"NAME" VARCHAR(100),"PROPS" CLOB,"PARAMS" CLOB,"DISABLED" NUMBER(2),"IS_PHYSICAL" NUMBER(2),"HAVE_PROP" NUMBER(2),"HAVE_PARM" NUMBER(2),"JOIN_BRAND" NUMBER(2),"HAVE_FIELD" NUMBER(2) default 0,CONSTRAINT PK_ES_GOODS_TYPE PRIMARY KEY ("TYPE_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GOODS_TYPE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_GOODS_TYPE

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GOODS_TYPE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_GOODS_TYPE" BEFORE INSERT
	ON ES_GOODS_TYPE FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."TYPE_ID" IS NULL THEN
		SELECT MAX("TYPE_ID") INTO MAXID FROM ES_GOODS_TYPE;
		SELECT S_ES_GOODS_TYPE.NEXTVAL INTO :NEW."TYPE_ID" FROM DUAL;
		IF MAXID>:NEW."TYPE_ID" THEN
			LOOP
				SELECT S_ES_GOODS_TYPE.NEXTVAL INTO :NEW."TYPE_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."TYPE_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_TYPE_BRAND';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_TYPE_BRAND';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_TYPE_BRAND';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_TYPE_BRAND ("TYPE_ID" NUMBER(8),"BRAND_ID" NUMBER(8))


BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_FREEOFFER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_FREEOFFER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_FREEOFFER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_FREEOFFER ("FO_ID" NUMBER(8) NOT NULL,"FO_CATEGORY_ID" NUMBER(8),"FO_NAME" VARCHAR(50),"PUBLISHABLE" NUMBER(6) default 0,"RECOMMEND" NUMBER(6) default 1,"SORDER" NUMBER(6),"LIMIT_PURCHASES" NUMBER(6),"STARTDATE" NUMBER(20),"ENDDATE" NUMBER(20),"LV_IDS" VARCHAR(50),"PRICE" NUMBER(20,2),"SYNOPSIS" VARCHAR(255),"LIST_THUMB" CLOB,"PIC" CLOB,"SCORE" NUMBER(8),"WEIGHT" NUMBER(20,2),"REPERTORY" NUMBER(8),"DESCRIPT" CLOB,"DISABLED" NUMBER(6) default 0,CONSTRAINT PK_ES_FREEOFFER PRIMARY KEY ("FO_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_FREEOFFER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_FREEOFFER

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_FREEOFFER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_FREEOFFER" BEFORE INSERT
	ON ES_FREEOFFER FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."FO_ID" IS NULL THEN
		SELECT MAX("FO_ID") INTO MAXID FROM ES_FREEOFFER;
		SELECT S_ES_FREEOFFER.NEXTVAL INTO :NEW."FO_ID" FROM DUAL;
		IF MAXID>:NEW."FO_ID" THEN
			LOOP
				SELECT S_ES_FREEOFFER.NEXTVAL INTO :NEW."FO_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."FO_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_FREEOFFER_CATEGORY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_FREEOFFER_CATEGORY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_FREEOFFER_CATEGORY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_FREEOFFER_CATEGORY ("CAT_ID" NUMBER(10) NOT NULL,"CAT_NAME" VARCHAR(50),"PUBLISHABLE" NUMBER(6) default 0,"SORDER" NUMBER(10),"DISABLED" NUMBER(6) default 0,CONSTRAINT PK_ES_FREEOFFER_CATEGORY PRIMARY KEY ("CAT_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_FREEOFFER_CATEGORY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_FREEOFFER_CATEGORY

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_FREEOFFER_CATEGORY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_FREEOFFER_CATEGORY" BEFORE INSERT
	ON ES_FREEOFFER_CATEGORY FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."CAT_ID" IS NULL THEN
		SELECT MAX("CAT_ID") INTO MAXID FROM ES_FREEOFFER_CATEGORY;
		SELECT S_ES_FREEOFFER_CATEGORY.NEXTVAL INTO :NEW."CAT_ID" FROM DUAL;
		IF MAXID>:NEW."CAT_ID" THEN
			LOOP
				SELECT S_ES_FREEOFFER_CATEGORY.NEXTVAL INTO :NEW."CAT_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."CAT_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_TAGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_TAGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_TAGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_TAGS ("TAG_ID" NUMBER(8) NOT NULL,"TAG_NAME" VARCHAR(255),"REL_COUNT" NUMBER(8),CONSTRAINT PK_ES_TAGS PRIMARY KEY ("TAG_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_TAGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_TAGS

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_TAGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_TAGS" BEFORE INSERT
	ON ES_TAGS FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."TAG_ID" IS NULL THEN
		SELECT MAX("TAG_ID") INTO MAXID FROM ES_TAGS;
		SELECT S_ES_TAGS.NEXTVAL INTO :NEW."TAG_ID" FROM DUAL;
		IF MAXID>:NEW."TAG_ID" THEN
			LOOP
				SELECT S_ES_TAGS.NEXTVAL INTO :NEW."TAG_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."TAG_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_TAG_REL';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_TAG_REL';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_TAG_REL';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_TAG_REL ("TAG_ID" NUMBER(8),"REL_ID" NUMBER(8),"ORDERNUM" NUMBER(10))


BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_MEMBER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_MEMBER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_MEMBER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_MEMBER ("MEMBER_ID" NUMBER(8) NOT NULL,"AGENTID" NUMBER(10),"PARENTID" NUMBER(10) default 0,"LV_ID" NUMBER(8),"UNAME" VARCHAR(50),"EMAIL" VARCHAR(50),"PASSWORD" VARCHAR(50),"REGTIME" NUMBER(20),"PW_ANSWER" VARCHAR(255),"PW_QUESTION" VARCHAR(255),"NAME" VARCHAR(255),"SEX" NUMBER(2),"BIRTHDAY" NUMBER(20),"ADVANCE" NUMBER(20,2) default 0.000,"PROVINCE_ID" NUMBER(10),"CITY_ID" NUMBER(10),"REGION_ID" NUMBER(10),"PROVINCE" VARCHAR(50),"CITY" VARCHAR(50),"REGION" VARCHAR(50),"ADDRESS" VARCHAR(255),"ZIP" VARCHAR(50),"MOBILE" VARCHAR(50),"TEL" VARCHAR(50),"POINT" NUMBER(10) default 0,"MP" NUMBER(10) default 0,"QQ" VARCHAR(50),"MSN" VARCHAR(50),"REMARK" CLOB,"LASTLOGIN" NUMBER(20) default 1280629569,"IS_AGENT" NUMBER(2) default 0,"LOGINCOUNT" NUMBER(10) default 0,"IS_CHEKED" NUMBER(2) default 0,"REGISTERIP" VARCHAR(255),"RECOMMEND_POINT_STATE" NUMBER(2) default 0,"LAST_SEND_EMAIL" NUMBER(10),"INFO_FULL" NUMBER(2) default 0,"FIND_CODE" VARCHAR(255),"FACE" VARCHAR(255),"NICKNAME" VARCHAR(255),"MIDENTITY" NUMBER(8),CONSTRAINT PK_ES_MEMBER PRIMARY KEY ("MEMBER_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_MEMBER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_MEMBER

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_MEMBER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_MEMBER" BEFORE INSERT
	ON ES_MEMBER FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."MEMBER_ID" IS NULL THEN
		SELECT MAX("MEMBER_ID") INTO MAXID FROM ES_MEMBER;
		SELECT S_ES_MEMBER.NEXTVAL INTO :NEW."MEMBER_ID" FROM DUAL;
		IF MAXID>:NEW."MEMBER_ID" THEN
			LOOP
				SELECT S_ES_MEMBER.NEXTVAL INTO :NEW."MEMBER_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."MEMBER_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_MEMBER_LV';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_MEMBER_LV';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_MEMBER_LV';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_MEMBER_LV ("LV_ID" NUMBER(8) NOT NULL,"NAME" VARCHAR(50),"DEFAULT_LV" NUMBER(2),"DISCOUNT" NUMBER(10),"POINT" NUMBER(10) default 0,CONSTRAINT PK_ES_MEMBER_LV PRIMARY KEY ("LV_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_MEMBER_LV';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_MEMBER_LV

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_MEMBER_LV';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_MEMBER_LV" BEFORE INSERT
	ON ES_MEMBER_LV FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."LV_ID" IS NULL THEN
		SELECT MAX("LV_ID") INTO MAXID FROM ES_MEMBER_LV;
		SELECT S_ES_MEMBER_LV.NEXTVAL INTO :NEW."LV_ID" FROM DUAL;
		IF MAXID>:NEW."LV_ID" THEN
			LOOP
				SELECT S_ES_MEMBER_LV.NEXTVAL INTO :NEW."LV_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."LV_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GOODS_LV_PRICE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_GOODS_LV_PRICE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GOODS_LV_PRICE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_GOODS_LV_PRICE ("ID" NUMBER(10) NOT NULL,"PRODUCTID" NUMBER(10),"GOODSID" NUMBER(10),"LVID" NUMBER(10),"PRICE" NUMBER(20,2),CONSTRAINT PK_ES_GOODS_LV_PRICE PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GOODS_LV_PRICE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_GOODS_LV_PRICE

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GOODS_LV_PRICE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_GOODS_LV_PRICE" BEFORE INSERT
	ON ES_GOODS_LV_PRICE FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_GOODS_LV_PRICE;
		SELECT S_ES_GOODS_LV_PRICE.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_GOODS_LV_PRICE.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_AGENT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_AGENT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_AGENT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_AGENT ("AGENTID" NUMBER(10) NOT NULL,"PARENTID" NUMBER(10),"USERNAME" VARCHAR(50),"TEL" VARCHAR(50),"MOBILE" VARCHAR(50),"SEX" NUMBER(6) default 0,"ZIP" VARCHAR(50),"ADDRESS" VARCHAR(255),"CITY" VARCHAR(50),"EMAIL" VARCHAR(50),"QQ" VARCHAR(50),"WW" VARCHAR(50),"MSN" VARCHAR(50),"ID_CARD" VARCHAR(50),"BANK_ACCOUNT" VARCHAR(50),"BANK_USERNAME" VARCHAR(50),"BANK_NAME" VARCHAR(50),"BANK_CITY" VARCHAR(50),"SHOP_URL" VARCHAR(50),"STATE" NUMBER(6) default 0,"DATELINE" NUMBER(10),CONSTRAINT PK_ES_AGENT PRIMARY KEY ("AGENTID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_AGENT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_AGENT

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_AGENT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_AGENT" BEFORE INSERT
	ON ES_AGENT FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."AGENTID" IS NULL THEN
		SELECT MAX("AGENTID") INTO MAXID FROM ES_AGENT;
		SELECT S_ES_AGENT.NEXTVAL INTO :NEW."AGENTID" FROM DUAL;
		IF MAXID>:NEW."AGENTID" THEN
			LOOP
				SELECT S_ES_AGENT.NEXTVAL INTO :NEW."AGENTID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."AGENTID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_AGENT_TRANSFER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_AGENT_TRANSFER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_AGENT_TRANSFER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_AGENT_TRANSFER ("ID" NUMBER(10) NOT NULL,"MEMBERID" NUMBER(10),"PRICE" NUMBER(20,2),"IS_TRANSFER" NUMBER(2),"BLANK_ACCOUNT" VARCHAR(50),"BLANK_USERNAME" VARCHAR(50),"BLANK_NAME" VARCHAR(50),"BLANK_CITY" VARCHAR(50),"APPLY_TIME" NUMBER(11),"TRANSFER_TIME" NUMBER(11),CONSTRAINT PK_ES_AGENT_TRANSFER PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_AGENT_TRANSFER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_AGENT_TRANSFER

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_AGENT_TRANSFER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_AGENT_TRANSFER" BEFORE INSERT
	ON ES_AGENT_TRANSFER FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_AGENT_TRANSFER;
		SELECT S_ES_AGENT_TRANSFER.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_AGENT_TRANSFER.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_DLY_TYPE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_DLY_TYPE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_DLY_TYPE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_DLY_TYPE ("TYPE_ID" NUMBER(8) NOT NULL,"NAME" VARCHAR(200),"PROTECT" NUMBER(2),"PROTECT_RATE" VARCHAR(6),"HAS_COD" VARCHAR(1),"MIN_PRICE" VARCHAR(10),"DETAIL" CLOB,"CORP_ID" NUMBER(8),"ORDERNUM" NUMBER(10),"DISABLED" NUMBER(2),"IS_SAME" NUMBER(2) default 0,"CONFIG" CLOB,"EXPRESSIONS" CLOB,CONSTRAINT PK_ES_DLY_TYPE PRIMARY KEY ("TYPE_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_DLY_TYPE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_DLY_TYPE

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_DLY_TYPE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_DLY_TYPE" BEFORE INSERT
	ON ES_DLY_TYPE FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."TYPE_ID" IS NULL THEN
		SELECT MAX("TYPE_ID") INTO MAXID FROM ES_DLY_TYPE;
		SELECT S_ES_DLY_TYPE.NEXTVAL INTO :NEW."TYPE_ID" FROM DUAL;
		IF MAXID>:NEW."TYPE_ID" THEN
			LOOP
				SELECT S_ES_DLY_TYPE.NEXTVAL INTO :NEW."TYPE_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."TYPE_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_DLY_AREA';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_DLY_AREA';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_DLY_AREA';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_DLY_AREA ("AREA_ID" NUMBER(8) NOT NULL,"NAME" VARCHAR(100),CONSTRAINT PK_ES_DLY_AREA PRIMARY KEY ("AREA_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_DLY_AREA';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_DLY_AREA

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_DLY_AREA';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_DLY_AREA" BEFORE INSERT
	ON ES_DLY_AREA FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."AREA_ID" IS NULL THEN
		SELECT MAX("AREA_ID") INTO MAXID FROM ES_DLY_AREA;
		SELECT S_ES_DLY_AREA.NEXTVAL INTO :NEW."AREA_ID" FROM DUAL;
		IF MAXID>:NEW."AREA_ID" THEN
			LOOP
				SELECT S_ES_DLY_AREA.NEXTVAL INTO :NEW."AREA_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."AREA_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_DLY_TYPE_AREA';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_DLY_TYPE_AREA';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_DLY_TYPE_AREA';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_DLY_TYPE_AREA ("TYPE_ID" NUMBER(8),"AREA_ID_GROUP" CLOB,"AREA_NAME_GROUP" CLOB,"EXPRESSIONS" CLOB,"HAS_COD" NUMBER(2),"CONFIG" CLOB)


BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_LOGI_COMPANY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_LOGI_COMPANY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_LOGI_COMPANY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_LOGI_COMPANY ("ID" NUMBER(9) NOT NULL,"NAME" VARCHAR(255),"CODE" VARCHAR(255),CONSTRAINT PK_ES_LOGI_COMPANY PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_LOGI_COMPANY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_LOGI_COMPANY

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_LOGI_COMPANY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_LOGI_COMPANY" BEFORE INSERT
	ON ES_LOGI_COMPANY FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_LOGI_COMPANY;
		SELECT S_ES_LOGI_COMPANY.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_LOGI_COMPANY.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_COMMENTS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_COMMENTS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_COMMENTS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_COMMENTS ("COMMENT_ID" NUMBER(8) NOT NULL,"FOR_COMMENT_ID" NUMBER(8),"OBJECT_ID" NUMBER(8) NOT NULL,"OBJECT_TYPE" VARCHAR(50) default 'ask' NOT NULL,"AUTHOR_ID" NUMBER(8),"AUTHOR" VARCHAR(100),"LEVELNAME" VARCHAR(50),"CONTACT" VARCHAR(255),"MEM_READ_STATUS" VARCHAR(5) default 'false' NOT NULL,"ADM_READ_STATUS" VARCHAR(5) default 'false' NOT NULL,"TIME" NUMBER(20),"LASTREPLY" NUMBER(20),"REPLY_NAME" VARCHAR(100),"TITLE" VARCHAR(255),"ACOMMENT" CLOB,"IP" VARCHAR(15),"DISPLAY" VARCHAR(5) default 'false' NOT NULL,"P_INDEX" VARCHAR(2),"DISABLED" VARCHAR(5) default 'false',"COMMENTTYPE" VARCHAR(50),"GRADE" NUMBER(10),"IMG" VARCHAR(255),CONSTRAINT PK_ES_COMMENTS PRIMARY KEY ("COMMENT_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_COMMENTS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_COMMENTS

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_COMMENTS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_COMMENTS" BEFORE INSERT
	ON ES_COMMENTS FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."COMMENT_ID" IS NULL THEN
		SELECT MAX("COMMENT_ID") INTO MAXID FROM ES_COMMENTS;
		SELECT S_ES_COMMENTS.NEXTVAL INTO :NEW."COMMENT_ID" FROM DUAL;
		IF MAXID>:NEW."COMMENT_ID" THEN
			LOOP
				SELECT S_ES_COMMENTS.NEXTVAL INTO :NEW."COMMENT_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."COMMENT_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_CART';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_CART';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_CART';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_CART ("CART_ID" NUMBER(8) NOT NULL,"GOODS_ID" NUMBER(9),"PRODUCT_ID" NUMBER(8),"ITEMTYPE" NUMBER(8) default 0,"NUM" NUMBER(8),"WEIGHT" NUMBER(20,2),"SESSION_ID" VARCHAR(50),"MEMBER_ID" NUMBER(10),"NAME" VARCHAR(255),"PRICE" NUMBER(20,2),"ADDON" CLOB,CONSTRAINT PK_ES_CART PRIMARY KEY ("CART_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_CART';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_CART

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_CART';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_CART" BEFORE INSERT
	ON ES_CART FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."CART_ID" IS NULL THEN
		SELECT MAX("CART_ID") INTO MAXID FROM ES_CART;
		SELECT S_ES_CART.NEXTVAL INTO :NEW."CART_ID" FROM DUAL;
		IF MAXID>:NEW."CART_ID" THEN
			LOOP
				SELECT S_ES_CART.NEXTVAL INTO :NEW."CART_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."CART_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ORDER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_ORDER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ORDER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_ORDER ("ORDER_ID" NUMBER(8) NOT NULL,"SN" VARCHAR(50),"MEMBER_ID" NUMBER(8),"STATUS" NUMBER(2),"PAY_STATUS" NUMBER(2),"SHIP_STATUS" NUMBER(2),"SHIPPING_ID" NUMBER(8),"SHIPPING_TYPE" VARCHAR(255),"SHIPPING_AREA" VARCHAR(255),"PAYMENT_ID" NUMBER(8),"PAYMENT_NAME" VARCHAR(50),"PAYMENT_TYPE" VARCHAR(50),"PAYMONEY" NUMBER(20,2),"GOODS" CLOB,"CREATE_TIME" NUMBER(20),"SHIP_NAME" VARCHAR(255),"SHIP_ADDR" VARCHAR(255),"SHIP_ZIP" VARCHAR(20),"SHIP_EMAIL" VARCHAR(50),"SHIP_MOBILE" VARCHAR(50),"SHIP_TEL" VARCHAR(50),"SHIP_DAY" VARCHAR(255),"SHIP_TIME" VARCHAR(255),"IS_PROTECT" VARCHAR(1),"PROTECT_PRICE" NUMBER(20,2),"GOODS_AMOUNT" NUMBER(20,2),"SHIPPING_AMOUNT" NUMBER(20,2),"ORDER_AMOUNT" NUMBER(20,2),"WEIGHT" NUMBER(20,2),"GOODS_NUM" NUMBER(8),"GAINEDPOINT" NUMBER(10) default 0,"CONSUMEPOINT" NUMBER(10) default 0,"REMARK" CLOB,"DISABLED" VARCHAR(1),"DISCOUNT" NUMBER(20,2),"IMPORTED" NUMBER(2) default 0,"PIMPORTED" NUMBER(2) default 0,"COMPLETE_TIME" NUMBER(11) default 0,"CANCEL_REASON" VARCHAR(255),"SIGNING_TIME" NUMBER(10),"THE_SIGN" VARCHAR(255),"ALLOCATION_TIME" NUMBER(10),"SHIP_PROVINCEID" NUMBER(10),"SHIP_CITYID" NUMBER(10),"SHIP_REGIONID" NUMBER(10),"SALE_CMPL" NUMBER(2),"SALE_CMPL_TIME" NUMBER(11),"DEPOTID" NUMBER(10),"ADMIN_REMARK" VARCHAR(1000),"NEED_PAY_MONEY" NUMBER(20,2),"SHIP_NO" VARCHAR(255),"ADDRESS_ID" NUMBER(10),"ITEMS_JSON" CLOB,"LOGI_ID" NUMBER(10),"LOGI_NAME" VARCHAR(255),CONSTRAINT PK_ES_ORDER PRIMARY KEY ("ORDER_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ORDER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_ORDER

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ORDER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_ORDER" BEFORE INSERT
	ON ES_ORDER FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ORDER_ID" IS NULL THEN
		SELECT MAX("ORDER_ID") INTO MAXID FROM ES_ORDER;
		SELECT S_ES_ORDER.NEXTVAL INTO :NEW."ORDER_ID" FROM DUAL;
		IF MAXID>:NEW."ORDER_ID" THEN
			LOOP
				SELECT S_ES_ORDER.NEXTVAL INTO :NEW."ORDER_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ORDER_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ORDER_ITEMS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_ORDER_ITEMS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ORDER_ITEMS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_ORDER_ITEMS ("ITEM_ID" NUMBER(8) NOT NULL,"ORDER_ID" NUMBER(8),"GOODS_ID" NUMBER(8),"PRODUCT_ID" NUMBER(8),"CAT_ID" NUMBER(8),"NUM" NUMBER(8),"SHIP_NUM" NUMBER(8),"SN" VARCHAR(255),"IMAGE" CLOB,"NAME" VARCHAR(255),"PRICE" NUMBER(20,2),"GAINEDPOINT" NUMBER(10) default 0,"ADDON" CLOB,"STATE" NUMBER(2) default 0,"CHANGE_GOODS_NAME" VARCHAR(255),"CHANGE_GOODS_ID" NUMBER(8),"UNIT" VARCHAR(20),CONSTRAINT PK_ES_ORDER_ITEMS PRIMARY KEY ("ITEM_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ORDER_ITEMS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_ORDER_ITEMS

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ORDER_ITEMS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_ORDER_ITEMS" BEFORE INSERT
	ON ES_ORDER_ITEMS FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ITEM_ID" IS NULL THEN
		SELECT MAX("ITEM_ID") INTO MAXID FROM ES_ORDER_ITEMS;
		SELECT S_ES_ORDER_ITEMS.NEXTVAL INTO :NEW."ITEM_ID" FROM DUAL;
		IF MAXID>:NEW."ITEM_ID" THEN
			LOOP
				SELECT S_ES_ORDER_ITEMS.NEXTVAL INTO :NEW."ITEM_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ITEM_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ORDER_LOG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_ORDER_LOG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ORDER_LOG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_ORDER_LOG ("LOG_ID" NUMBER(8) NOT NULL,"ORDER_ID" NUMBER(8),"OP_ID" NUMBER(8),"OP_NAME" VARCHAR(50),"MESSAGE" CLOB,"OP_TIME" NUMBER(20),CONSTRAINT PK_ES_ORDER_LOG PRIMARY KEY ("LOG_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ORDER_LOG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_ORDER_LOG

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ORDER_LOG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_ORDER_LOG" BEFORE INSERT
	ON ES_ORDER_LOG FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."LOG_ID" IS NULL THEN
		SELECT MAX("LOG_ID") INTO MAXID FROM ES_ORDER_LOG;
		SELECT S_ES_ORDER_LOG.NEXTVAL INTO :NEW."LOG_ID" FROM DUAL;
		IF MAXID>:NEW."LOG_ID" THEN
			LOOP
				SELECT S_ES_ORDER_LOG.NEXTVAL INTO :NEW."LOG_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."LOG_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_DELIVERY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_DELIVERY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_DELIVERY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_DELIVERY ("DELIVERY_ID" NUMBER(8) NOT NULL,"TYPE" VARCHAR(1),"ORDER_ID" NUMBER(8),"MEMBER_ID" NUMBER(8),"MONEY" NUMBER(20,2),"SHIP_TYPE" VARCHAR(255),"IS_PROTECT" VARCHAR(4),"PROTECT_PRICE" NUMBER(20,2),"LOGI_ID" NUMBER(8),"LOGI_NAME" VARCHAR(255),"LOGI_NO" VARCHAR(255),"SHIP_NAME" VARCHAR(255),"PROVINCE_ID" NUMBER(10),"CITY_ID" NUMBER(10),"REGION_ID" NUMBER(10),"REGION" VARCHAR(50),"CITY" VARCHAR(50),"PROVINCE" VARCHAR(50),"SHIP_ADDR" VARCHAR(255),"SHIP_ZIP" VARCHAR(50),"SHIP_TEL" VARCHAR(50),"SHIP_MOBILE" VARCHAR(50),"SHIP_EMAIL" VARCHAR(50),"OP_NAME" VARCHAR(255),"REMARK" CLOB,"CREATE_TIME" NUMBER(20),"REASON" VARCHAR(255),"LOGI_CODE" VARCHAR(255),CONSTRAINT PK_ES_DELIVERY PRIMARY KEY ("DELIVERY_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_DELIVERY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_DELIVERY

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_DELIVERY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_DELIVERY" BEFORE INSERT
	ON ES_DELIVERY FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."DELIVERY_ID" IS NULL THEN
		SELECT MAX("DELIVERY_ID") INTO MAXID FROM ES_DELIVERY;
		SELECT S_ES_DELIVERY.NEXTVAL INTO :NEW."DELIVERY_ID" FROM DUAL;
		IF MAXID>:NEW."DELIVERY_ID" THEN
			LOOP
				SELECT S_ES_DELIVERY.NEXTVAL INTO :NEW."DELIVERY_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."DELIVERY_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_DELIVERY_ITEM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_DELIVERY_ITEM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_DELIVERY_ITEM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_DELIVERY_ITEM ("ITEM_ID" NUMBER(8) NOT NULL,"DELIVERY_ID" NUMBER(8),"GOODS_ID" NUMBER(8),"PRODUCT_ID" NUMBER(8),"SN" VARCHAR(50),"NAME" VARCHAR(255),"NUM" NUMBER(8),"ITEMTYPE" NUMBER(2) default 0,"ORDER_ITEMID" NUMBER(10),"DEPOTID" NUMBER(10),CONSTRAINT PK_ES_DELIVERY_ITEM PRIMARY KEY ("ITEM_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_DELIVERY_ITEM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_DELIVERY_ITEM

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_DELIVERY_ITEM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_DELIVERY_ITEM" BEFORE INSERT
	ON ES_DELIVERY_ITEM FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ITEM_ID" IS NULL THEN
		SELECT MAX("ITEM_ID") INTO MAXID FROM ES_DELIVERY_ITEM;
		SELECT S_ES_DELIVERY_ITEM.NEXTVAL INTO :NEW."ITEM_ID" FROM DUAL;
		IF MAXID>:NEW."ITEM_ID" THEN
			LOOP
				SELECT S_ES_DELIVERY_ITEM.NEXTVAL INTO :NEW."ITEM_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ITEM_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_PAYMENT_CFG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_PAYMENT_CFG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_PAYMENT_CFG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_PAYMENT_CFG ("ID" NUMBER(8) NOT NULL,"NAME" VARCHAR(255),"CONFIG" CLOB,"BIREF" CLOB,"PAY_FEE" NUMBER(20,2),"TYPE" VARCHAR(255),CONSTRAINT PK_ES_PAYMENT_CFG PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_PAYMENT_CFG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_PAYMENT_CFG

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_PAYMENT_CFG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_PAYMENT_CFG" BEFORE INSERT
	ON ES_PAYMENT_CFG FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_PAYMENT_CFG;
		SELECT S_ES_PAYMENT_CFG.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_PAYMENT_CFG.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_PAYMENT_LOGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_PAYMENT_LOGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_PAYMENT_LOGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_PAYMENT_LOGS ("PAYMENT_ID" NUMBER(8) NOT NULL,"ORDER_ID" NUMBER(8),"ORDER_SN" VARCHAR(255),"MEMBER_ID" NUMBER(8),"PAY_METHOD" VARCHAR(50),"SN" VARCHAR(50),"PAY_USER" VARCHAR(50),"MONEY" NUMBER(20,2),"PAY_DATE" NUMBER(20),"REMARK" CLOB,"TYPE" NUMBER(2),"STATUS" NUMBER(2),"CREATE_TIME" NUMBER(20),"ADMIN_USER" VARCHAR(50),"PAYMONEY" NUMBER(20,2) default 0.00,"MARKET_POINT" NUMBER(20,2) default 0.00,"CREDIT" NUMBER(20,2) default 0.00,CONSTRAINT PK_ES_PAYMENT_LOGS PRIMARY KEY ("PAYMENT_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_PAYMENT_LOGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_PAYMENT_LOGS

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_PAYMENT_LOGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_PAYMENT_LOGS" BEFORE INSERT
	ON ES_PAYMENT_LOGS FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."PAYMENT_ID" IS NULL THEN
		SELECT MAX("PAYMENT_ID") INTO MAXID FROM ES_PAYMENT_LOGS;
		SELECT S_ES_PAYMENT_LOGS.NEXTVAL INTO :NEW."PAYMENT_ID" FROM DUAL;
		IF MAXID>:NEW."PAYMENT_ID" THEN
			LOOP
				SELECT S_ES_PAYMENT_LOGS.NEXTVAL INTO :NEW."PAYMENT_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."PAYMENT_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_PAYMENT_DETAIL';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_PAYMENT_DETAIL';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_PAYMENT_DETAIL';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_PAYMENT_DETAIL ("DETAIL_ID" NUMBER(8) NOT NULL,"PAYMENT_ID" NUMBER(8),"PAY_MONEY" NUMBER(20,2),"PAY_DATE" NUMBER(11),"ADMIN_USER" VARCHAR(50),CONSTRAINT PK_ES_PAYMENT_DETAIL PRIMARY KEY ("DETAIL_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_PAYMENT_DETAIL';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_PAYMENT_DETAIL

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_PAYMENT_DETAIL';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_PAYMENT_DETAIL" BEFORE INSERT
	ON ES_PAYMENT_DETAIL FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."DETAIL_ID" IS NULL THEN
		SELECT MAX("DETAIL_ID") INTO MAXID FROM ES_PAYMENT_DETAIL;
		SELECT S_ES_PAYMENT_DETAIL.NEXTVAL INTO :NEW."DETAIL_ID" FROM DUAL;
		IF MAXID>:NEW."DETAIL_ID" THEN
			LOOP
				SELECT S_ES_PAYMENT_DETAIL.NEXTVAL INTO :NEW."DETAIL_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."DETAIL_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_REFUND_LOGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_REFUND_LOGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_REFUND_LOGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_REFUND_LOGS ("REFUND_ID" NUMBER(20) NOT NULL,"ORDER_ID" NUMBER(10),"ORDER_SN" VARCHAR(255),"MEMBER_ID" NUMBER(8),"TYPE" NUMBER(2),"PAY_METHOD" VARCHAR(50),"PAY_USER" VARCHAR(50),"ACCOUNT" VARCHAR(50),"SN" VARCHAR(50),"MONEY" NUMBER(20,2),"OP_USER" VARCHAR(10),"PAY_DATE" NUMBER(20),"REMARK" CLOB,"CREATE_TIME" NUMBER(20),CONSTRAINT PK_ES_REFUND_LOGS PRIMARY KEY ("REFUND_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_REFUND_LOGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_REFUND_LOGS

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_REFUND_LOGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_REFUND_LOGS" BEFORE INSERT
	ON ES_REFUND_LOGS FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."REFUND_ID" IS NULL THEN
		SELECT MAX("REFUND_ID") INTO MAXID FROM ES_REFUND_LOGS;
		SELECT S_ES_REFUND_LOGS.NEXTVAL INTO :NEW."REFUND_ID" FROM DUAL;
		IF MAXID>:NEW."REFUND_ID" THEN
			LOOP
				SELECT S_ES_REFUND_LOGS.NEXTVAL INTO :NEW."REFUND_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."REFUND_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_MEMBER_ADDRESS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_MEMBER_ADDRESS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_MEMBER_ADDRESS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_MEMBER_ADDRESS ("ADDR_ID" NUMBER(8) NOT NULL,"MEMBER_ID" NUMBER(8) default 0 NOT NULL,"NAME" VARCHAR(50),"COUNTRY" VARCHAR(30),"PROVINCE_ID" NUMBER(10),"CITY_ID" NUMBER(10),"REGION_ID" NUMBER(10),"REGION" VARCHAR(50),"CITY" VARCHAR(50),"PROVINCE" VARCHAR(50),"ADDR" VARCHAR(255),"ZIP" VARCHAR(20),"TEL" VARCHAR(30),"MOBILE" VARCHAR(30),"DEF_ADDR" NUMBER(10) default 0,CONSTRAINT PK_ES_MEMBER_ADDRESS PRIMARY KEY ("ADDR_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_MEMBER_ADDRESS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_MEMBER_ADDRESS

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_MEMBER_ADDRESS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_MEMBER_ADDRESS" BEFORE INSERT
	ON ES_MEMBER_ADDRESS FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ADDR_ID" IS NULL THEN
		SELECT MAX("ADDR_ID") INTO MAXID FROM ES_MEMBER_ADDRESS;
		SELECT S_ES_MEMBER_ADDRESS.NEXTVAL INTO :NEW."ADDR_ID" FROM DUAL;
		IF MAXID>:NEW."ADDR_ID" THEN
			LOOP
				SELECT S_ES_MEMBER_ADDRESS.NEXTVAL INTO :NEW."ADDR_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ADDR_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_MESSAGE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_MESSAGE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_MESSAGE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_MESSAGE ("MSG_ID" NUMBER(8) NOT NULL,"FOR_ID" NUMBER(8) default 0 NOT NULL,"MSG_FROM" VARCHAR(30) default 'anonymous' NOT NULL,"FROM_ID" NUMBER(8) default 0,"FROM_TYPE" NUMBER(5) default 0 NOT NULL,"TO_ID" NUMBER(8) default 0 NOT NULL,"MSG_TO" VARCHAR(50),"TO_TYPE" NUMBER(5) default 0 NOT NULL,"UNREAD" VARCHAR(1) default '0' NOT NULL,"FOLDER" VARCHAR(6) default 'inbox' NOT NULL,"EMAIL" VARCHAR(255),"TEL" VARCHAR(30),"SUBJECT" VARCHAR(100) NOT NULL,"MESSAGE" CLOB NOT NULL,"REL_ORDER" NUMBER(20) default 0,"DATE_LINE" NUMBER(20) default 0 NOT NULL,"IS_SEC" VARCHAR(5) default 'true' NOT NULL,"DEL_STATUS" VARCHAR(1) default '0',"DISABLED" VARCHAR(5) default 'false' NOT NULL,"MSG_IP" VARCHAR(20) default '' NOT NULL,"MSG_TYPE" VARCHAR(7) default 'default' NOT NULL,CONSTRAINT PK_ES_MESSAGE PRIMARY KEY ("MSG_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_MESSAGE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_MESSAGE

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_MESSAGE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_MESSAGE" BEFORE INSERT
	ON ES_MESSAGE FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."MSG_ID" IS NULL THEN
		SELECT MAX("MSG_ID") INTO MAXID FROM ES_MESSAGE;
		SELECT S_ES_MESSAGE.NEXTVAL INTO :NEW."MSG_ID" FROM DUAL;
		IF MAXID>:NEW."MSG_ID" THEN
			LOOP
				SELECT S_ES_MESSAGE.NEXTVAL INTO :NEW."MSG_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."MSG_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ORDER_GIFT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_ORDER_GIFT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ORDER_GIFT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_ORDER_GIFT ("ORDER_ID" NUMBER(8),"GIFT_ID" NUMBER(8),"GIFT_NAME" VARCHAR(255),"GETMETHOD" VARCHAR(8),"POINT" NUMBER(10),"NUM" NUMBER(10) default 0,"SHIPNUM" NUMBER(10) default 0)


BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GNOTIFY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_GNOTIFY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GNOTIFY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_GNOTIFY ("GNOTIFY_ID" NUMBER(8) NOT NULL,"GOODS_ID" NUMBER(8),"MEMBER_ID" NUMBER(8),"PRODUCT_ID" NUMBER(8),"EMAIL" VARCHAR(200),"STATUS" VARCHAR(8) default 'ready' NOT NULL,"SEND_TIME" NUMBER(20),"CREATE_TIME" NUMBER(20),"DISABLED" VARCHAR(5) default 'false' NOT NULL,"REMARK" CLOB,CONSTRAINT PK_ES_GNOTIFY PRIMARY KEY ("GNOTIFY_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GNOTIFY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_GNOTIFY

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GNOTIFY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_GNOTIFY" BEFORE INSERT
	ON ES_GNOTIFY FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."GNOTIFY_ID" IS NULL THEN
		SELECT MAX("GNOTIFY_ID") INTO MAXID FROM ES_GNOTIFY;
		SELECT S_ES_GNOTIFY.NEXTVAL INTO :NEW."GNOTIFY_ID" FROM DUAL;
		IF MAXID>:NEW."GNOTIFY_ID" THEN
			LOOP
				SELECT S_ES_GNOTIFY.NEXTVAL INTO :NEW."GNOTIFY_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."GNOTIFY_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_POINT_HISTORY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_POINT_HISTORY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_POINT_HISTORY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_POINT_HISTORY ("ID" NUMBER(8) NOT NULL,"MEMBER_ID" NUMBER(9) NOT NULL,"POINT" NUMBER(10) NOT NULL,"TIME" NUMBER(20) NOT NULL,"REASON" VARCHAR(50) NOT NULL,"RELATED_ID" NUMBER(20),"TYPE" NUMBER(2) NOT NULL,"OPERATOR" VARCHAR(50),"POINT_TYPE" NUMBER(2) default 0,"MP" NUMBER(10),CONSTRAINT PK_ES_POINT_HISTORY PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_POINT_HISTORY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_POINT_HISTORY

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_POINT_HISTORY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_POINT_HISTORY" BEFORE INSERT
	ON ES_POINT_HISTORY FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_POINT_HISTORY;
		SELECT S_ES_POINT_HISTORY.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_POINT_HISTORY.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_PROMOTION';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_PROMOTION';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_PROMOTION';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_PROMOTION ("PMT_ID" NUMBER(8) NOT NULL,"PMTS_ID" VARCHAR(255) NOT NULL,"PMTA_ID" NUMBER(8),"PMT_TIME_BEGIN" NUMBER(20),"PMT_TIME_END" NUMBER(20),"ORDER_MONEY_FROM" NUMBER(20,2) default 0.000 NOT NULL,"ORDER_MONEY_TO" NUMBER(20,2) default 9999999.000 NOT NULL,"SEQ" NUMBER(3) default 0 NOT NULL,"PMT_TYPE" VARCHAR(1) default '0' NOT NULL,"PMT_BELONG" VARCHAR(1) default '0' NOT NULL,"PMT_BOND_TYPE" VARCHAR(1) NOT NULL,"PMT_DESCRIBE" CLOB,"PMT_SOLUTION" CLOB,"PMT_IFCOUPON" NUMBER(3) default 1 NOT NULL,"PMT_UPDATE_TIME" NUMBER(20) default 0,"PMT_BASIC_TYPE" VARCHAR(5) default 'goods',"DISABLED" VARCHAR(5) default 'false',"PMT_IFSALE" VARCHAR(5) default 'true' NOT NULL,"PMT_DISTYPE" NUMBER(3) default 0 NOT NULL,CONSTRAINT PK_ES_PROMOTION PRIMARY KEY ("PMT_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_PROMOTION';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_PROMOTION

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_PROMOTION';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_PROMOTION" BEFORE INSERT
	ON ES_PROMOTION FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."PMT_ID" IS NULL THEN
		SELECT MAX("PMT_ID") INTO MAXID FROM ES_PROMOTION;
		SELECT S_ES_PROMOTION.NEXTVAL INTO :NEW."PMT_ID" FROM DUAL;
		IF MAXID>:NEW."PMT_ID" THEN
			LOOP
				SELECT S_ES_PROMOTION.NEXTVAL INTO :NEW."PMT_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."PMT_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_PMT_MEMBER_LV';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_PMT_MEMBER_LV';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_PMT_MEMBER_LV';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_PMT_MEMBER_LV ("PMT_ID" NUMBER(8),"LV_ID" NUMBER(8))


BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_PMT_GOODS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_PMT_GOODS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_PMT_GOODS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_PMT_GOODS ("PMT_ID" NUMBER(8),"GOODS_ID" NUMBER(8))


BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_FAVORITE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_FAVORITE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_FAVORITE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_FAVORITE ("FAVORITE_ID" NUMBER(10) NOT NULL,"MEMBER_ID" NUMBER(10),"GOODS_ID" NUMBER(10),"FAVORITE_TIME" NUMBER(10),CONSTRAINT PK_ES_FAVORITE PRIMARY KEY ("FAVORITE_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_FAVORITE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_FAVORITE

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_FAVORITE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_FAVORITE" BEFORE INSERT
	ON ES_FAVORITE FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."FAVORITE_ID" IS NULL THEN
		SELECT MAX("FAVORITE_ID") INTO MAXID FROM ES_FAVORITE;
		SELECT S_ES_FAVORITE.NEXTVAL INTO :NEW."FAVORITE_ID" FROM DUAL;
		IF MAXID>:NEW."FAVORITE_ID" THEN
			LOOP
				SELECT S_ES_FAVORITE.NEXTVAL INTO :NEW."FAVORITE_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."FAVORITE_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ADVANCE_LOGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_ADVANCE_LOGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ADVANCE_LOGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_ADVANCE_LOGS ("LOG_ID" NUMBER(8) NOT NULL,"MEMBER_ID" NUMBER(8) NOT NULL,"MONEY" NUMBER(20,2) NOT NULL,"MESSAGE" VARCHAR(255),"MTIME" NUMBER(20) NOT NULL,"PAYMENT_ID" VARCHAR(20),"ORDER_ID" VARCHAR(20),"PAYMETHOD" VARCHAR(100),"MEMO" VARCHAR(100),"IMPORT_MONEY" NUMBER(20,2) default 0.000 NOT NULL,"EXPLODE_MONEY" NUMBER(20,2) default 0.000 NOT NULL,"MEMBER_ADVANCE" NUMBER(20,2) default 0.000 NOT NULL,"SHOP_ADVANCE" NUMBER(20,2) default 0.000 NOT NULL,"DISABLED" VARCHAR(5) default 'false' NOT NULL,CONSTRAINT PK_ES_ADVANCE_LOGS PRIMARY KEY ("LOG_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ADVANCE_LOGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_ADVANCE_LOGS

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ADVANCE_LOGS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_ADVANCE_LOGS" BEFORE INSERT
	ON ES_ADVANCE_LOGS FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."LOG_ID" IS NULL THEN
		SELECT MAX("LOG_ID") INTO MAXID FROM ES_ADVANCE_LOGS;
		SELECT S_ES_ADVANCE_LOGS.NEXTVAL INTO :NEW."LOG_ID" FROM DUAL;
		IF MAXID>:NEW."LOG_ID" THEN
			LOOP
				SELECT S_ES_ADVANCE_LOGS.NEXTVAL INTO :NEW."LOG_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."LOG_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_PROMOTION_ACTIVITY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_PROMOTION_ACTIVITY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_PROMOTION_ACTIVITY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_PROMOTION_ACTIVITY ("ID" NUMBER(8) NOT NULL,"NAME" VARCHAR(200),"ENABLE" NUMBER(2),"BEGIN_TIME" NUMBER(20),"END_TIME" NUMBER(20),"BRIEF" CLOB,"DISABLED" NUMBER(2),CONSTRAINT PK_ES_PROMOTION_ACTIVITY PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_PROMOTION_ACTIVITY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_PROMOTION_ACTIVITY

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_PROMOTION_ACTIVITY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_PROMOTION_ACTIVITY" BEFORE INSERT
	ON ES_PROMOTION_ACTIVITY FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_PROMOTION_ACTIVITY;
		SELECT S_ES_PROMOTION_ACTIVITY.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_PROMOTION_ACTIVITY.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GOODS_COMPLEX';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_GOODS_COMPLEX';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GOODS_COMPLEX';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_GOODS_COMPLEX ("GOODS_1" NUMBER(8) NOT NULL,"GOODS_2" NUMBER(8) NOT NULL,"MANUAL" VARCHAR(4),"RATE" NUMBER(8) default 1 NOT NULL)


BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GOODS_ADJUNCT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_GOODS_ADJUNCT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GOODS_ADJUNCT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_GOODS_ADJUNCT ("ADJUNCT_ID" NUMBER(10) NOT NULL,"GOODS_ID" NUMBER(10),"ADJUNCT_NAME" VARCHAR(50),"MIN_NUM" NUMBER(10),"MAX_NUM" NUMBER(10),"SET_PRICE" VARCHAR(8),"PRICE" NUMBER(20,2),"ITEMS" CLOB,CONSTRAINT PK_ES_GOODS_ADJUNCT PRIMARY KEY ("ADJUNCT_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GOODS_ADJUNCT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_GOODS_ADJUNCT

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GOODS_ADJUNCT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_GOODS_ADJUNCT" BEFORE INSERT
	ON ES_GOODS_ADJUNCT FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ADJUNCT_ID" IS NULL THEN
		SELECT MAX("ADJUNCT_ID") INTO MAXID FROM ES_GOODS_ADJUNCT;
		SELECT S_ES_GOODS_ADJUNCT.NEXTVAL INTO :NEW."ADJUNCT_ID" FROM DUAL;
		IF MAXID>:NEW."ADJUNCT_ID" THEN
			LOOP
				SELECT S_ES_GOODS_ADJUNCT.NEXTVAL INTO :NEW."ADJUNCT_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ADJUNCT_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GOODS_ARTICLES';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_GOODS_ARTICLES';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GOODS_ARTICLES';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_GOODS_ARTICLES ("ID" NUMBER(10) NOT NULL,"GOODSID" NUMBER(10),"ARTICLEID" NUMBER(10),"TITLE" VARCHAR(255),CONSTRAINT PK_ES_GOODS_ARTICLES PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GOODS_ARTICLES';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_GOODS_ARTICLES

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GOODS_ARTICLES';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_GOODS_ARTICLES" BEFORE INSERT
	ON ES_GOODS_ARTICLES FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_GOODS_ARTICLES;
		SELECT S_ES_GOODS_ARTICLES.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_GOODS_ARTICLES.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GOODS_FIELD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_GOODS_FIELD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GOODS_FIELD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_GOODS_FIELD ("FIELD_ID" NUMBER(10) NOT NULL,"CHINA_NAME" VARCHAR(255),"ENGLISH_NAME" VARCHAR(255),"PLUGINID" VARCHAR(255),"CONFIG" CLOB,"ADD_TIME" NUMBER(20),"TYPE_ID" NUMBER(8),"IS_VALIDATE" NUMBER(2),"FIELD_SORT" NUMBER(10),"IS_SHOW" NUMBER(2),CONSTRAINT PK_ES_GOODS_FIELD PRIMARY KEY ("FIELD_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GOODS_FIELD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_GOODS_FIELD

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GOODS_FIELD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_GOODS_FIELD" BEFORE INSERT
	ON ES_GOODS_FIELD FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."FIELD_ID" IS NULL THEN
		SELECT MAX("FIELD_ID") INTO MAXID FROM ES_GOODS_FIELD;
		SELECT S_ES_GOODS_FIELD.NEXTVAL INTO :NEW."FIELD_ID" FROM DUAL;
		IF MAXID>:NEW."FIELD_ID" THEN
			LOOP
				SELECT S_ES_GOODS_FIELD.NEXTVAL INTO :NEW."FIELD_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."FIELD_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GROUP_BUY_COUNT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_GROUP_BUY_COUNT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GROUP_BUY_COUNT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_GROUP_BUY_COUNT ("RULEID" NUMBER(10) NOT NULL,"GROUPID" NUMBER(10),"START_TIME" NUMBER(11),"END_TIME" NUMBER(11),"NUM" NUMBER(10),CONSTRAINT PK_ES_GROUP_BUY_COUNT PRIMARY KEY ("RULEID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GROUP_BUY_COUNT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_GROUP_BUY_COUNT

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GROUP_BUY_COUNT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_GROUP_BUY_COUNT" BEFORE INSERT
	ON ES_GROUP_BUY_COUNT FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."RULEID" IS NULL THEN
		SELECT MAX("RULEID") INTO MAXID FROM ES_GROUP_BUY_COUNT;
		SELECT S_ES_GROUP_BUY_COUNT.NEXTVAL INTO :NEW."RULEID" FROM DUAL;
		IF MAXID>:NEW."RULEID" THEN
			LOOP
				SELECT S_ES_GROUP_BUY_COUNT.NEXTVAL INTO :NEW."RULEID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."RULEID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_LIMITBUY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_LIMITBUY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_LIMITBUY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_LIMITBUY ("ID" NUMBER(10) NOT NULL,"NAME" VARCHAR(255),"START_TIME" NUMBER(11),"END_TIME" NUMBER(11),"ADD_TIME" NUMBER(11),"IMG" VARCHAR(255),"IS_INDEX" NUMBER(2) default 0,CONSTRAINT PK_ES_LIMITBUY PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_LIMITBUY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_LIMITBUY

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_LIMITBUY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_LIMITBUY" BEFORE INSERT
	ON ES_LIMITBUY FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_LIMITBUY;
		SELECT S_ES_LIMITBUY.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_LIMITBUY.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_LIMITBUY_GOODS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_LIMITBUY_GOODS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_LIMITBUY_GOODS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_LIMITBUY_GOODS ("ID" NUMBER(10) NOT NULL,"LIMITBUYID" NUMBER(10),"GOODSID" NUMBER(10),"PRICE" NUMBER(10),CONSTRAINT PK_ES_LIMITBUY_GOODS PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_LIMITBUY_GOODS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_LIMITBUY_GOODS

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_LIMITBUY_GOODS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_LIMITBUY_GOODS" BEFORE INSERT
	ON ES_LIMITBUY_GOODS FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_LIMITBUY_GOODS;
		SELECT S_ES_LIMITBUY_GOODS.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_LIMITBUY_GOODS.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ARTICLE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_ARTICLE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ARTICLE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_ARTICLE ("ID" NUMBER(8) NOT NULL,"TITLE" VARCHAR(255),"CONTENT" CLOB,"CREATE_TIME" NUMBER(20),"CAT_ID" NUMBER(8),CONSTRAINT PK_ES_ARTICLE PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ARTICLE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_ARTICLE

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ARTICLE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_ARTICLE" BEFORE INSERT
	ON ES_ARTICLE FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_ARTICLE;
		SELECT S_ES_ARTICLE.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_ARTICLE.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ARTICLE_CAT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_ARTICLE_CAT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ARTICLE_CAT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_ARTICLE_CAT ("CAT_ID" NUMBER(8) NOT NULL,"NAME" VARCHAR(200),"PARENT_ID" NUMBER(8),"CAT_PATH" VARCHAR(200),"CAT_ORDER" NUMBER(5),CONSTRAINT PK_ES_ARTICLE_CAT PRIMARY KEY ("CAT_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ARTICLE_CAT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_ARTICLE_CAT

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ARTICLE_CAT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_ARTICLE_CAT" BEFORE INSERT
	ON ES_ARTICLE_CAT FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."CAT_ID" IS NULL THEN
		SELECT MAX("CAT_ID") INTO MAXID FROM ES_ARTICLE_CAT;
		SELECT S_ES_ARTICLE_CAT.NEXTVAL INTO :NEW."CAT_ID" FROM DUAL;
		IF MAXID>:NEW."CAT_ID" THEN
			LOOP
				SELECT S_ES_ARTICLE_CAT.NEXTVAL INTO :NEW."CAT_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."CAT_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_PACKAGE_PRODUCT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_PACKAGE_PRODUCT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_PACKAGE_PRODUCT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_PACKAGE_PRODUCT ("PRODUCT_ID" NUMBER(8) NOT NULL,"GOODS_ID" NUMBER(8) NOT NULL,"DISCOUNT" NUMBER(20,2),"PKGNUM" NUMBER(8) default 1 NOT NULL)


BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_DLY_CENTER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_DLY_CENTER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_DLY_CENTER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_DLY_CENTER ("DLY_CENTER_ID" NUMBER(10) NOT NULL,"NAME" VARCHAR(50) NOT NULL,"ADDRESS" VARCHAR(200),"PROVINCE" VARCHAR(100),"CITY" VARCHAR(100),"REGION" VARCHAR(100),"PROVINCE_ID" NUMBER(10),"CITY_ID" NUMBER(10),"REGION_ID" NUMBER(10),"ZIP" VARCHAR(6),"PHONE" VARCHAR(100),"UNAME" VARCHAR(100),"CELLPHONE" VARCHAR(100),"SEX" VARCHAR(6),"MEMO" CLOB,"DISABLED" VARCHAR(5) default 'false' NOT NULL,"CHOOSE" VARCHAR(5) NOT NULL,CONSTRAINT PK_ES_DLY_CENTER PRIMARY KEY ("DLY_CENTER_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_DLY_CENTER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_DLY_CENTER

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_DLY_CENTER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_DLY_CENTER" BEFORE INSERT
	ON ES_DLY_CENTER FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."DLY_CENTER_ID" IS NULL THEN
		SELECT MAX("DLY_CENTER_ID") INTO MAXID FROM ES_DLY_CENTER;
		SELECT S_ES_DLY_CENTER.NEXTVAL INTO :NEW."DLY_CENTER_ID" FROM DUAL;
		IF MAXID>:NEW."DLY_CENTER_ID" THEN
			LOOP
				SELECT S_ES_DLY_CENTER.NEXTVAL INTO :NEW."DLY_CENTER_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."DLY_CENTER_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_PRINT_TMPL';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_PRINT_TMPL';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_PRINT_TMPL';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_PRINT_TMPL ("PRT_TMPL_ID" NUMBER(10) NOT NULL,"PRT_TMPL_TITLE" VARCHAR(100) NOT NULL,"SHORTCUT" VARCHAR(5) default 'false',"DISABLED" VARCHAR(5) default 'false',"PRT_TMPL_WIDTH" VARCHAR(10) default 100 NOT NULL,"PRT_TMPL_HEIGHT" VARCHAR(10) default 100 NOT NULL,"PRT_TMPL_DATA" CLOB,"BGIMAGE" VARCHAR(255),CONSTRAINT PK_ES_PRINT_TMPL PRIMARY KEY ("PRT_TMPL_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_PRINT_TMPL';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_PRINT_TMPL

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_PRINT_TMPL';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_PRINT_TMPL" BEFORE INSERT
	ON ES_PRINT_TMPL FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."PRT_TMPL_ID" IS NULL THEN
		SELECT MAX("PRT_TMPL_ID") INTO MAXID FROM ES_PRINT_TMPL;
		SELECT S_ES_PRINT_TMPL.NEXTVAL INTO :NEW."PRT_TMPL_ID" FROM DUAL;
		IF MAXID>:NEW."PRT_TMPL_ID" THEN
			LOOP
				SELECT S_ES_PRINT_TMPL.NEXTVAL INTO :NEW."PRT_TMPL_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."PRT_TMPL_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ORDER_PMT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_ORDER_PMT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ORDER_PMT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_ORDER_PMT ("PMT_ID" NUMBER(8),"ORDER_ID" NUMBER(8),"PMT_AMOUNT" NUMBER(20,2),"PMT_DESCRIBE" VARCHAR(255))


BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_MEMBER_COMMENT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_MEMBER_COMMENT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_MEMBER_COMMENT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_MEMBER_COMMENT ("COMMENT_ID" NUMBER(10) NOT NULL,"GOODS_ID" NUMBER(10),"MEMBER_ID" NUMBER(10),"CONTENT" CLOB,"IMG" VARCHAR(255),"DATELINE" NUMBER(20),"IP" VARCHAR(50),"REPLY" CLOB,"REPLYTIME" NUMBER(20),"STATUS" NUMBER(2),"TYPE" NUMBER(2),"REPLYSTATUS" NUMBER(2),"GRADE" NUMBER(10),"IS_TOP" NUMBER(2) default 0 NOT NULL,CONSTRAINT PK_ES_MEMBER_COMMENT PRIMARY KEY ("COMMENT_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_MEMBER_COMMENT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_MEMBER_COMMENT

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_MEMBER_COMMENT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_MEMBER_COMMENT" BEFORE INSERT
	ON ES_MEMBER_COMMENT FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."COMMENT_ID" IS NULL THEN
		SELECT MAX("COMMENT_ID") INTO MAXID FROM ES_MEMBER_COMMENT;
		SELECT S_ES_MEMBER_COMMENT.NEXTVAL INTO :NEW."COMMENT_ID" FROM DUAL;
		IF MAXID>:NEW."COMMENT_ID" THEN
			LOOP
				SELECT S_ES_MEMBER_COMMENT.NEXTVAL INTO :NEW."COMMENT_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."COMMENT_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_WARN_NUM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_WARN_NUM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_WARN_NUM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_WARN_NUM ("ID" NUMBER(20) NOT NULL,"GOODS_ID" NUMBER(20),"PRODUCT_ID" NUMBER(20),"WARN_NUM" NUMBER(20),CONSTRAINT PK_ES_WARN_NUM PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_WARN_NUM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_WARN_NUM

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_WARN_NUM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_WARN_NUM" BEFORE INSERT
	ON ES_WARN_NUM FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_WARN_NUM;
		SELECT S_ES_WARN_NUM.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_WARN_NUM.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_FREEZE_POINT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_FREEZE_POINT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_FREEZE_POINT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_FREEZE_POINT ("ID" NUMBER(10) NOT NULL,"MEMBERID" NUMBER(10),"CHILDID" NUMBER(10),"POINT" NUMBER(10),"MP" NUMBER(10),"ORDERID" NUMBER(10),"DATELINE" NUMBER(11),"TYPE" VARCHAR(50),CONSTRAINT PK_ES_FREEZE_POINT PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_FREEZE_POINT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_FREEZE_POINT

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_FREEZE_POINT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_FREEZE_POINT" BEFORE INSERT
	ON ES_FREEZE_POINT FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_FREEZE_POINT;
		SELECT S_ES_FREEZE_POINT.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_FREEZE_POINT.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_MEMBER_LV_DISCOUNT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_MEMBER_LV_DISCOUNT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_MEMBER_LV_DISCOUNT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_MEMBER_LV_DISCOUNT ("ID" NUMBER(8) NOT NULL,"LV_ID" NUMBER(8),"CAT_ID" NUMBER(8),"DISCOUNT" NUMBER(10),CONSTRAINT PK_ES_MEMBER_LV_DISCOUNT PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_MEMBER_LV_DISCOUNT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_MEMBER_LV_DISCOUNT

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_MEMBER_LV_DISCOUNT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_MEMBER_LV_DISCOUNT" BEFORE INSERT
	ON ES_MEMBER_LV_DISCOUNT FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_MEMBER_LV_DISCOUNT;
		SELECT S_ES_MEMBER_LV_DISCOUNT.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_MEMBER_LV_DISCOUNT.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ORDER_META';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_ORDER_META';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ORDER_META';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_ORDER_META ("METAID" NUMBER(10) NOT NULL,"ORDERID" NUMBER(10),"META_KEY" VARCHAR(255),"META_VALUE" CLOB,CONSTRAINT PK_ES_ORDER_META PRIMARY KEY ("METAID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ORDER_META';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_ORDER_META

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ORDER_META';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_ORDER_META" BEFORE INSERT
	ON ES_ORDER_META FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."METAID" IS NULL THEN
		SELECT MAX("METAID") INTO MAXID FROM ES_ORDER_META;
		SELECT S_ES_ORDER_META.NEXTVAL INTO :NEW."METAID" FROM DUAL;
		IF MAXID>:NEW."METAID" THEN
			LOOP
				SELECT S_ES_ORDER_META.NEXTVAL INTO :NEW."METAID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."METAID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_COUPONS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_COUPONS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_COUPONS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_COUPONS ("CPNS_ID" NUMBER(8) NOT NULL,"CPNS_NAME" VARCHAR(255),"CPNS_SN" VARCHAR(50),"CPNS_STATUS" VARCHAR(1) default '1',"CPNS_TYPE" VARCHAR(1) default '1',"DISABLED" VARCHAR(5) default 'false',"CAN_GIVE" NUMBER(2),"USERNAME" VARCHAR(255),"MEMBER_ID" NUMBER(10),"MEMBER_ID_START" NUMBER(10),"MEMBER_ID_END" NUMBER(10),"REG_TIME_START" NUMBER(10),"REG_TIME_END" NUMBER(10),"LV_IDS" CLOB,"LV_NAMES" CLOB,"END_TIME" NUMBER(11),"CAT_IDS" CLOB,"CAT_NAMES" CLOB,"GOODS_PRICE" VARCHAR(22),"DISCOUNT_PRICE" VARCHAR(22),"ADD_TIME" NUMBER(11),"REMARK" CLOB,"ALLCAT" NUMBER(2) default 0,CONSTRAINT PK_ES_COUPONS PRIMARY KEY ("CPNS_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_COUPONS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_COUPONS

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_COUPONS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_COUPONS" BEFORE INSERT
	ON ES_COUPONS FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."CPNS_ID" IS NULL THEN
		SELECT MAX("CPNS_ID") INTO MAXID FROM ES_COUPONS;
		SELECT S_ES_COUPONS.NEXTVAL INTO :NEW."CPNS_ID" FROM DUAL;
		IF MAXID>:NEW."CPNS_ID" THEN
			LOOP
				SELECT S_ES_COUPONS.NEXTVAL INTO :NEW."CPNS_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."CPNS_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_MEMBER_COUPON';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_MEMBER_COUPON';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_MEMBER_COUPON';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_MEMBER_COUPON ("ID" NUMBER(10) NOT NULL,"CPNSID" NUMBER(10),"MEMBERID" NUMBER(10),"USED" NUMBER(2),"GET_TIME" NUMBER(11),"CPNS_SN" VARCHAR(255),"CPNS_NAME" VARCHAR(255),"CAT_IDS" VARCHAR(1000),"CAT_NAMES" VARCHAR(1000),"GOODS_PRICE" VARCHAR(22),"DISCOUNT_PRICE" VARCHAR(22),"ALLCAT" NUMBER(2) default 0,"END_TIME" NUMBER(11),"CAN_GIVE" NUMBER(2),CONSTRAINT PK_ES_MEMBER_COUPON PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_MEMBER_COUPON';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_MEMBER_COUPON

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_MEMBER_COUPON';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_MEMBER_COUPON" BEFORE INSERT
	ON ES_MEMBER_COUPON FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_MEMBER_COUPON;
		SELECT S_ES_MEMBER_COUPON.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_MEMBER_COUPON.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_MEMBER_ORDER_ITEM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_MEMBER_ORDER_ITEM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_MEMBER_ORDER_ITEM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_MEMBER_ORDER_ITEM ("ID" NUMBER(10) NOT NULL,"MEMBER_ID" NUMBER(10),"GOODS_ID" NUMBER(10),"ORDER_ID" NUMBER(10),"ITEM_ID" NUMBER(10),"COMMENTED" VARCHAR(4),"COMMENT_TIME" NUMBER(20),CONSTRAINT PK_ES_MEMBER_ORDER_ITEM PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_MEMBER_ORDER_ITEM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_MEMBER_ORDER_ITEM

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_MEMBER_ORDER_ITEM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_MEMBER_ORDER_ITEM" BEFORE INSERT
	ON ES_MEMBER_ORDER_ITEM FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_MEMBER_ORDER_ITEM;
		SELECT S_ES_MEMBER_ORDER_ITEM.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_MEMBER_ORDER_ITEM.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_STORE_LOG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_STORE_LOG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_STORE_LOG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_STORE_LOG ("LOGID" NUMBER(10) NOT NULL,"GOODSID" NUMBER(10),"PRODUCTID" NUMBER(10),"GOODSNAME" VARCHAR(255),"DEPOT_TYPE" NUMBER(2),"OP_TYPE" NUMBER(2) default 0,"NUM" NUMBER(10),"ENABLE_STORE" NUMBER(10) default 0,"REMARK" CLOB,"DATELINE" NUMBER(10),"USERID" NUMBER(10),"USERNAME" VARCHAR(255),"DEPOTID" NUMBER(10),CONSTRAINT PK_ES_STORE_LOG PRIMARY KEY ("LOGID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_STORE_LOG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_STORE_LOG

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_STORE_LOG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_STORE_LOG" BEFORE INSERT
	ON ES_STORE_LOG FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."LOGID" IS NULL THEN
		SELECT MAX("LOGID") INTO MAXID FROM ES_STORE_LOG;
		SELECT S_ES_STORE_LOG.NEXTVAL INTO :NEW."LOGID" FROM DUAL;
		IF MAXID>:NEW."LOGID" THEN
			LOOP
				SELECT S_ES_STORE_LOG.NEXTVAL INTO :NEW."LOGID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."LOGID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_DEPOT_USER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_DEPOT_USER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_DEPOT_USER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_DEPOT_USER ("USERID" NUMBER(10) NOT NULL,"DEPOTID" NUMBER(10))


BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_PRODUCT_STORE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_PRODUCT_STORE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_PRODUCT_STORE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_PRODUCT_STORE ("STOREID" NUMBER(8) NOT NULL,"GOODSID" NUMBER(8),"PRODUCTID" NUMBER(8),"DEPOTID" NUMBER(8),"STORE" NUMBER(8),"ENABLE_STORE" NUMBER(8) default 0,CONSTRAINT PK_ES_PRODUCT_STORE PRIMARY KEY ("STOREID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_PRODUCT_STORE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_PRODUCT_STORE

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_PRODUCT_STORE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_PRODUCT_STORE" BEFORE INSERT
	ON ES_PRODUCT_STORE FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."STOREID" IS NULL THEN
		SELECT MAX("STOREID") INTO MAXID FROM ES_PRODUCT_STORE;
		SELECT S_ES_PRODUCT_STORE.NEXTVAL INTO :NEW."STOREID" FROM DUAL;
		IF MAXID>:NEW."STOREID" THEN
			LOOP
				SELECT S_ES_PRODUCT_STORE.NEXTVAL INTO :NEW."STOREID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."STOREID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_DEPOT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_DEPOT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_DEPOT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_DEPOT ("ID" NUMBER(10) NOT NULL,"NAME" VARCHAR(255),"CHOOSE" NUMBER(10),CONSTRAINT PK_ES_DEPOT PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_DEPOT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_DEPOT

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_DEPOT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_DEPOT" BEFORE INSERT
	ON ES_DEPOT FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_DEPOT;
		SELECT S_ES_DEPOT.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_DEPOT.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GOODS_DEPOT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_GOODS_DEPOT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GOODS_DEPOT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_GOODS_DEPOT ("ID" NUMBER(10) NOT NULL,"GOODSID" NUMBER(10),"DEPOTID" NUMBER(10),"ISCMPL" NUMBER(2) default 0,CONSTRAINT PK_ES_GOODS_DEPOT PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GOODS_DEPOT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_GOODS_DEPOT

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GOODS_DEPOT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_GOODS_DEPOT" BEFORE INSERT
	ON ES_GOODS_DEPOT FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_GOODS_DEPOT;
		SELECT S_ES_GOODS_DEPOT.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_GOODS_DEPOT.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ALLOCATION_ITEM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_ALLOCATION_ITEM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ALLOCATION_ITEM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_ALLOCATION_ITEM ("ALLOCATIONID" NUMBER(10) NOT NULL,"ITEMID" NUMBER(10),"ORDERID" NUMBER(10),"DEPOTID" NUMBER(10),"GOODSID" NUMBER(10),"PRODUCTID" NUMBER(10),"NUM" NUMBER(10),"OTHER" CLOB,"ISCMPL" NUMBER(2) default 0,CONSTRAINT PK_ES_ALLOCATION_ITEM PRIMARY KEY ("ALLOCATIONID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ALLOCATION_ITEM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_ALLOCATION_ITEM

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ALLOCATION_ITEM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_ALLOCATION_ITEM" BEFORE INSERT
	ON ES_ALLOCATION_ITEM FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ALLOCATIONID" IS NULL THEN
		SELECT MAX("ALLOCATIONID") INTO MAXID FROM ES_ALLOCATION_ITEM;
		SELECT S_ES_ALLOCATION_ITEM.NEXTVAL INTO :NEW."ALLOCATIONID" FROM DUAL;
		IF MAXID>:NEW."ALLOCATIONID" THEN
			LOOP
				SELECT S_ES_ALLOCATION_ITEM.NEXTVAL INTO :NEW."ALLOCATIONID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ALLOCATIONID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_RETURNS_ORDER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_RETURNS_ORDER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_RETURNS_ORDER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_RETURNS_ORDER ("ID" NUMBER(10) NOT NULL,"ORDERSN" VARCHAR(50),"MEMBERID" NUMBER(10),"STATE" NUMBER(6),"GOODSNS" CLOB,"TYPE" NUMBER(6),"ADD_TIME" NUMBER(20),"PHOTO" VARCHAR(100),"REFUSE_REASON" VARCHAR(200),"APPLY_REASON" VARCHAR(200),CONSTRAINT PK_ES_RETURNS_ORDER PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_RETURNS_ORDER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_RETURNS_ORDER

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_RETURNS_ORDER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_RETURNS_ORDER" BEFORE INSERT
	ON ES_RETURNS_ORDER FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_RETURNS_ORDER;
		SELECT S_ES_RETURNS_ORDER.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_RETURNS_ORDER.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_SELLBACK_GOODSLIST';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_SELLBACK_GOODSLIST';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_SELLBACK_GOODSLIST';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_SELLBACK_GOODSLIST ("ID" NUMBER(10) NOT NULL,"RECID" NUMBER(8),"GOODS_ID" NUMBER(8),"PRODUCT_ID" NUMBER(8),"SHIP_NUM" NUMBER(8),"PRICE" NUMBER(20,2),"RETURN_NUM" NUMBER(8),"STORAGE_NUM" NUMBER(8),"GOODS_REMARK" VARCHAR(100),"RETURN_TYPE" NUMBER(8),CONSTRAINT PK_ES_SELLBACK_GOODSLIST PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_SELLBACK_GOODSLIST';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_SELLBACK_GOODSLIST

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_SELLBACK_GOODSLIST';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_SELLBACK_GOODSLIST" BEFORE INSERT
	ON ES_SELLBACK_GOODSLIST FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_SELLBACK_GOODSLIST;
		SELECT S_ES_SELLBACK_GOODSLIST.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_SELLBACK_GOODSLIST.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_SELLBACK_LIST';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_SELLBACK_LIST';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_SELLBACK_LIST';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_SELLBACK_LIST ("ID" NUMBER(10) NOT NULL,"TRADENO" VARCHAR(100),"TRADESTATUS" NUMBER(2),"ORDERSN" VARCHAR(100),"REGOPERATOR" VARCHAR(100),"REGTIME" NUMBER(20),"ALLTOTAL_PAY" NUMBER(20,2),"GOODSLIST" VARCHAR(255),"REMARK" VARCHAR(255),"SELLER_REMARK" VARCHAR(255),"WAREHOUSE_REMARK" VARCHAR(255),"FINANCE_REMARK" VARCHAR(255),"MEMBER_ID" NUMBER(10),"SNDTO" VARCHAR(255),"TEL" VARCHAR(255),"ADR" VARCHAR(255),"ZIP" VARCHAR(255),"REFUND_WAY" VARCHAR(255),"TOTAL" VARCHAR(50),"DEPOTID" NUMBER(10),"RETURN_ACCOUNT" VARCHAR(255),CONSTRAINT PK_ES_SELLBACK_LIST PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_SELLBACK_LIST';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_SELLBACK_LIST

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_SELLBACK_LIST';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_SELLBACK_LIST" BEFORE INSERT
	ON ES_SELLBACK_LIST FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_SELLBACK_LIST;
		SELECT S_ES_SELLBACK_LIST.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_SELLBACK_LIST.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_SELLBACK_LOG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_SELLBACK_LOG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_SELLBACK_LOG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_SELLBACK_LOG ("ID" NUMBER(10) NOT NULL,"RECID" NUMBER(10),"LOGTIME" NUMBER(20),"LOGDETAIL" VARCHAR(255),"OPERATOR" VARCHAR(100),CONSTRAINT PK_ES_SELLBACK_LOG PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_SELLBACK_LOG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_SELLBACK_LOG

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_SELLBACK_LOG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_SELLBACK_LOG" BEFORE INSERT
	ON ES_SELLBACK_LOG FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_SELLBACK_LOG;
		SELECT S_ES_SELLBACK_LOG.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_SELLBACK_LOG.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_EMAIL_LIST';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_EMAIL_LIST';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_EMAIL_LIST';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_EMAIL_LIST ("EMAIL_ID" NUMBER(10) NOT NULL,"TITLE" VARCHAR(255),"EMAIL_TYPE" VARCHAR(255),"IS_SUCCESS" NUMBER(2),"EMAIL" VARCHAR(255),"CONTENT" CLOB,"ERROR_NUM" NUMBER(6),"LAST_SEND" NUMBER(11),CONSTRAINT PK_ES_EMAIL_LIST PRIMARY KEY ("EMAIL_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_EMAIL_LIST';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_EMAIL_LIST

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_EMAIL_LIST';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_EMAIL_LIST" BEFORE INSERT
	ON ES_EMAIL_LIST FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."EMAIL_ID" IS NULL THEN
		SELECT MAX("EMAIL_ID") INTO MAXID FROM ES_EMAIL_LIST;
		SELECT S_ES_EMAIL_LIST.NEXTVAL INTO :NEW."EMAIL_ID" FROM DUAL;
		IF MAXID>:NEW."EMAIL_ID" THEN
			LOOP
				SELECT S_ES_EMAIL_LIST.NEXTVAL INTO :NEW."EMAIL_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."EMAIL_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ACCOUNT_LOG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_ACCOUNT_LOG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ACCOUNT_LOG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_ACCOUNT_LOG ("LOG_ID" NUMBER(8) NOT NULL,"USER_ID" NUMBER(8),"USER_MONEY" NUMBER(20,2),"FROZEN_MONEY" NUMBER(20,2),"RANK_POINTS" NUMBER(9),"PAY_POINTS" NUMBER(20,2),"FRIEND_POINTS" NUMBER(20,2),"CHANGE_TIME" NUMBER(20),"CHANGE_DESC" VARCHAR(20),"CHANGE_TYPE" NUMBER(2),"FROZEN_FRIEND_POINTS" NUMBER(10),"ADD_CREDIT_ACCOUNT_MONEY" NUMBER(20,2),CONSTRAINT PK_ES_ACCOUNT_LOG PRIMARY KEY ("LOG_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_ACCOUNT_LOG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_ACCOUNT_LOG

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_ACCOUNT_LOG';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_ACCOUNT_LOG" BEFORE INSERT
	ON ES_ACCOUNT_LOG FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."LOG_ID" IS NULL THEN
		SELECT MAX("LOG_ID") INTO MAXID FROM ES_ACCOUNT_LOG;
		SELECT S_ES_ACCOUNT_LOG.NEXTVAL INTO :NEW."LOG_ID" FROM DUAL;
		IF MAXID>:NEW."LOG_ID" THEN
			LOOP
				SELECT S_ES_ACCOUNT_LOG.NEXTVAL INTO :NEW."LOG_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."LOG_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_BONUS_TYPE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_BONUS_TYPE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_BONUS_TYPE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_BONUS_TYPE ("TYPE_ID" NUMBER(8) NOT NULL,"TYPE_NAME" VARCHAR(60),"TYPE_MONEY" NUMBER(20,2),"SEND_TYPE" NUMBER(2),"MIN_AMOUNT" NUMBER(20,2),"MAX_AMOUNT" NUMBER(20,2),"SEND_START_DATE" NUMBER(11),"SEND_END_DATE" NUMBER(11),"USE_START_DATE" NUMBER(11),"USE_END_DATE" NUMBER(11),"MIN_GOODS_AMOUNT" NUMBER(20,2),"RECOGNITION" VARCHAR(20),"CREATE_NUM" NUMBER(10),"USE_NUM" NUMBER(10) default 0,"BELONG" NUMBER(10),CONSTRAINT PK_ES_BONUS_TYPE PRIMARY KEY ("TYPE_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_BONUS_TYPE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_BONUS_TYPE

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_BONUS_TYPE';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_BONUS_TYPE" BEFORE INSERT
	ON ES_BONUS_TYPE FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."TYPE_ID" IS NULL THEN
		SELECT MAX("TYPE_ID") INTO MAXID FROM ES_BONUS_TYPE;
		SELECT S_ES_BONUS_TYPE.NEXTVAL INTO :NEW."TYPE_ID" FROM DUAL;
		IF MAXID>:NEW."TYPE_ID" THEN
			LOOP
				SELECT S_ES_BONUS_TYPE.NEXTVAL INTO :NEW."TYPE_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."TYPE_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_MEMBER_BONUS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_MEMBER_BONUS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_MEMBER_BONUS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_MEMBER_BONUS ("BONUS_ID" NUMBER(8) NOT NULL,"BONUS_TYPE_ID" NUMBER(10),"BONUS_SN" VARCHAR(30),"MEMBER_ID" NUMBER(10),"USED_TIME" NUMBER(20),"ORDER_ID" NUMBER(10),"EMAILED" NUMBER(2),"PASSWORD" VARCHAR(32),"BINDING" NUMBER(10),"MEMBER_NAME" VARCHAR(100),"ORDER_SN" VARCHAR(100),"TYPE_NAME" VARCHAR(100),"BONUS_TYPE" NUMBER(2),"CREATE_TIME" NUMBER(20),"USED" NUMBER(2) default 0,CONSTRAINT PK_ES_MEMBER_BONUS PRIMARY KEY ("BONUS_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_MEMBER_BONUS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_MEMBER_BONUS

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_MEMBER_BONUS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_MEMBER_BONUS" BEFORE INSERT
	ON ES_MEMBER_BONUS FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."BONUS_ID" IS NULL THEN
		SELECT MAX("BONUS_ID") INTO MAXID FROM ES_MEMBER_BONUS;
		SELECT S_ES_MEMBER_BONUS.NEXTVAL INTO :NEW."BONUS_ID" FROM DUAL;
		IF MAXID>:NEW."BONUS_ID" THEN
			LOOP
				SELECT S_ES_MEMBER_BONUS.NEXTVAL INTO :NEW."BONUS_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."BONUS_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_BONUS_GOODS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_BONUS_GOODS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_BONUS_GOODS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_BONUS_GOODS ("REL_ID" NUMBER(10) NOT NULL,"BONUS_TYPE_ID" NUMBER(10),"GOODS_ID" NUMBER(10),CONSTRAINT PK_ES_BONUS_GOODS PRIMARY KEY ("REL_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_BONUS_GOODS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_BONUS_GOODS

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_BONUS_GOODS';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_BONUS_GOODS" BEFORE INSERT
	ON ES_BONUS_GOODS FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."REL_ID" IS NULL THEN
		SELECT MAX("REL_ID") INTO MAXID FROM ES_BONUS_GOODS;
		SELECT S_ES_BONUS_GOODS.NEXTVAL INTO :NEW."REL_ID" FROM DUAL;
		IF MAXID>:NEW."REL_ID" THEN
			LOOP
				SELECT S_ES_BONUS_GOODS.NEXTVAL INTO :NEW."REL_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."REL_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_TRANSACTION_RECORD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_TRANSACTION_RECORD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_TRANSACTION_RECORD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_TRANSACTION_RECORD ("RECORD_ID" NUMBER(10) NOT NULL,"ORDER_ID" NUMBER(10),"GOODS_ID" NUMBER(10),"GOODS_NUM" NUMBER(10),"ROG_TIME" NUMBER(20),"UNAME" VARCHAR(50),"PRICE" NUMBER(20,2),"MEMBER_ID" NUMBER(10),CONSTRAINT PK_ES_TRANSACTION_RECORD PRIMARY KEY ("RECORD_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_TRANSACTION_RECORD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_TRANSACTION_RECORD

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_TRANSACTION_RECORD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_TRANSACTION_RECORD" BEFORE INSERT
	ON ES_TRANSACTION_RECORD FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."RECORD_ID" IS NULL THEN
		SELECT MAX("RECORD_ID") INTO MAXID FROM ES_TRANSACTION_RECORD;
		SELECT S_ES_TRANSACTION_RECORD.NEXTVAL INTO :NEW."RECORD_ID" FROM DUAL;
		IF MAXID>:NEW."RECORD_ID" THEN
			LOOP
				SELECT S_ES_TRANSACTION_RECORD.NEXTVAL INTO :NEW."RECORD_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."RECORD_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_SMS_PLATFORM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_SMS_PLATFORM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_SMS_PLATFORM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_SMS_PLATFORM ("ID" NUMBER(8) NOT NULL,"PLATFORM_NAME" VARCHAR(50),"IS_OPEN" NUMBER(8),"CONFIG" CLOB,"CODE" VARCHAR(50),CONSTRAINT PK_ES_SMS_PLATFORM PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_SMS_PLATFORM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_SMS_PLATFORM

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_SMS_PLATFORM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_SMS_PLATFORM" BEFORE INSERT
	ON ES_SMS_PLATFORM FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_SMS_PLATFORM;
		SELECT S_ES_SMS_PLATFORM.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_SMS_PLATFORM.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_EXPRESS_PLATFORM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_EXPRESS_PLATFORM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_EXPRESS_PLATFORM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_EXPRESS_PLATFORM ("ID" NUMBER(8) NOT NULL,"PLATFORM_NAME" VARCHAR(50),"IS_OPEN" NUMBER(8),"CONFIG" CLOB,"CODE" VARCHAR(50),CONSTRAINT PK_ES_EXPRESS_PLATFORM PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_EXPRESS_PLATFORM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_EXPRESS_PLATFORM

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_EXPRESS_PLATFORM';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_EXPRESS_PLATFORM" BEFORE INSERT
	ON ES_EXPRESS_PLATFORM FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_EXPRESS_PLATFORM;
		SELECT S_ES_EXPRESS_PLATFORM.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_EXPRESS_PLATFORM.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_SPECIFICATION';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_SPECIFICATION';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_SPECIFICATION';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_SPECIFICATION ("SPEC_ID" NUMBER(8) NOT NULL,"SPEC_NAME" VARCHAR(50),"SPEC_SHOW_TYPE" NUMBER(2),"SPEC_TYPE" NUMBER(2),"SPEC_MEMO" VARCHAR(50),"SPEC_ORDER" NUMBER(8),"DISABLED" NUMBER(2),CONSTRAINT PK_ES_SPECIFICATION PRIMARY KEY ("SPEC_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_SPECIFICATION';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_SPECIFICATION

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_SPECIFICATION';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_SPECIFICATION" BEFORE INSERT
	ON ES_SPECIFICATION FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."SPEC_ID" IS NULL THEN
		SELECT MAX("SPEC_ID") INTO MAXID FROM ES_SPECIFICATION;
		SELECT S_ES_SPECIFICATION.NEXTVAL INTO :NEW."SPEC_ID" FROM DUAL;
		IF MAXID>:NEW."SPEC_ID" THEN
			LOOP
				SELECT S_ES_SPECIFICATION.NEXTVAL INTO :NEW."SPEC_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."SPEC_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_SPEC_VALUES';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_SPEC_VALUES';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_SPEC_VALUES';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_SPEC_VALUES ("SPEC_VALUE_ID" NUMBER(8) NOT NULL,"SPEC_ID" NUMBER(8),"SPEC_VALUE" VARCHAR(100),"SPEC_IMAGE" VARCHAR(255),"SPEC_ORDER" NUMBER(8),"SPEC_TYPE" NUMBER(2),CONSTRAINT PK_ES_SPEC_VALUES PRIMARY KEY ("SPEC_VALUE_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_SPEC_VALUES';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_SPEC_VALUES

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_SPEC_VALUES';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_SPEC_VALUES" BEFORE INSERT
	ON ES_SPEC_VALUES FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."SPEC_VALUE_ID" IS NULL THEN
		SELECT MAX("SPEC_VALUE_ID") INTO MAXID FROM ES_SPEC_VALUES;
		SELECT S_ES_SPEC_VALUES.NEXTVAL INTO :NEW."SPEC_VALUE_ID" FROM DUAL;
		IF MAXID>:NEW."SPEC_VALUE_ID" THEN
			LOOP
				SELECT S_ES_SPEC_VALUES.NEXTVAL INTO :NEW."SPEC_VALUE_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."SPEC_VALUE_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_RECEIPT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_RECEIPT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_RECEIPT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_RECEIPT ("ID" NUMBER(11) NOT NULL,"ORDER_ID" NUMBER(11),"TITLE" VARCHAR(255) default '',"ADD_TIME" NUMBER(20),"CONTENT" VARCHAR(255) default '',"STATUS" NUMBER(2) default 0,CONSTRAINT PK_ES_RECEIPT PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_RECEIPT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_RECEIPT

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_RECEIPT';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_RECEIPT" BEFORE INSERT
	ON ES_RECEIPT FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_RECEIPT;
		SELECT S_ES_RECEIPT.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_RECEIPT.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GOODS_GALLERY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_GOODS_GALLERY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GOODS_GALLERY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_GOODS_GALLERY ("IMG_ID" NUMBER(11) NOT NULL,"GOODS_ID" NUMBER(11),"THUMBNAIL" VARCHAR(255),"SMALL" VARCHAR(255),"BIG" VARCHAR(255),"ORIGINAL" VARCHAR(255),"TINY" VARCHAR(255),"ISDEFAULT" NUMBER(11) default 0,CONSTRAINT PK_ES_GOODS_GALLERY PRIMARY KEY ("IMG_ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_GOODS_GALLERY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_GOODS_GALLERY

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_GOODS_GALLERY';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_GOODS_GALLERY" BEFORE INSERT
	ON ES_GOODS_GALLERY FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."IMG_ID" IS NULL THEN
		SELECT MAX("IMG_ID") INTO MAXID FROM ES_GOODS_GALLERY;
		SELECT S_ES_GOODS_GALLERY.NEXTVAL INTO :NEW."IMG_ID" FROM DUAL;
		IF MAXID>:NEW."IMG_ID" THEN
			LOOP
				SELECT S_ES_GOODS_GALLERY.NEXTVAL INTO :NEW."IMG_ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."IMG_ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_HOT_KEYWORD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_HOT_KEYWORD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_HOT_KEYWORD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_HOT_KEYWORD ("ID" NUMBER(11) NOT NULL,"SORT" NUMBER(11),"ADD_TIME" NUMBER(20),"LASTMODIFIED" NUMBER(20),"HIT" NUMBER(20),"ABLE_TIME" NUMBER(20),"STATE" NUMBER(11),"USER_ID" NUMBER(20),"CAT_ID" NUMBER(11),"IS_COMMEND" NUMBER(11),"SYS_LOCK" NUMBER(11) default 0,"PAGE_TITLE" VARCHAR(255),"PAGE_KEYWORDS" VARCHAR(255),"PAGE_DESCRIPTION" CLOB,"SITE_CODE" NUMBER(11) default 100000,"SITEIDLIST" VARCHAR(255),"KEYWORD" VARCHAR(255),"URL" VARCHAR(255),CONSTRAINT PK_ES_HOT_KEYWORD PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_HOT_KEYWORD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_HOT_KEYWORD

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_HOT_KEYWORD';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_HOT_KEYWORD" BEFORE INSERT
	ON ES_HOT_KEYWORD FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_HOT_KEYWORD;
		SELECT S_ES_HOT_KEYWORD.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_HOT_KEYWORD.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_HELPCENTER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_HELPCENTER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_HELPCENTER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;


CREATE TABLE ES_HELPCENTER ("ID" NUMBER(11) NOT NULL,"SORT" NUMBER(11),"ADD_TIME" NUMBER(20),"LASTMODIFIED" NUMBER(20),"HIT" NUMBER(20),"ABLE_TIME" NUMBER(20),"STATE" NUMBER(11),"USER_ID" NUMBER(20),"CAT_ID" NUMBER(11),"IS_COMMEND" NUMBER(11),"SYS_LOCK" NUMBER(11) default 0,"PAGE_TITLE" VARCHAR(255),"PAGE_KEYWORDS" VARCHAR(255),"PAGE_DESCRIPTION" CLOB,"SITE_CODE" NUMBER(11) default 100000,"SITEIDLIST" VARCHAR(255),"TITLE" VARCHAR(255),"IMAGE" VARCHAR(255),"CONTENT" CLOB,CONSTRAINT PK_ES_HELPCENTER PRIMARY KEY ("ID"))

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_HELPCENTER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE SEQUENCE S_ES_HELPCENTER

BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_HELPCENTER';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TRIGGER "TIB_ES_HELPCENTER" BEFORE INSERT
	ON ES_HELPCENTER FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			INTEGER;
BEGIN
	IF :NEW."ID" IS NULL THEN
		SELECT MAX("ID") INTO MAXID FROM ES_HELPCENTER;
		SELECT S_ES_HELPCENTER.NEXTVAL INTO :NEW."ID" FROM DUAL;
		IF MAXID>:NEW."ID" THEN
			LOOP
				SELECT S_ES_HELPCENTER.NEXTVAL INTO :NEW."ID" FROM DUAL;
				EXIT WHEN MAXID<:NEW."ID";
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN INTEGRITY_ERROR THEN
		RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
