
BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_APPEAL_FLOW';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_APPEAL_FLOW';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_APPEAL_FLOW';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TABLE ES_APPEAL_FLOW (
  APPEAL_FLOW_ID NUMBER(11) NOT NULL,
  APPLICANT VARCHAR(20) DEFAULT NULL,
  APPLICANT_CN VARCHAR(20) DEFAULT NULL,
  REASON VARCHAR(2000) DEFAULT NULL,
  APPEAL_PHOTO VARCHAR(300) DEFAULT NULL,
  PROCESS_INSTANCE_ID VARCHAR(50) DEFAULT NULL,
  BUSINESS_ID  NUMBER(11) DEFAULT NULL,
  CREATE_TIME  NUMBER(20,0) DEFAULT NULL,
  STATUS VARCHAR(2) DEFAULT NULL,
  PRIMARY KEY (APPEAL_FLOW_ID)
);

CREATE SEQUENCE S_ES_APPEAL_FLOW;

CREATE TRIGGER "TIB_ES_APPEAL_FLOW" BEFORE INSERT
	ON ES_APPEAL_FLOW FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			 INTEGER;
	BEGIN
		IF :NEW."APPEAL_FLOW_ID" IS NULL THEN
			SELECT MAX("APPEAL_FLOW_ID") INTO MAXID FROM ES_APPEAL_FLOW;
			SELECT S_ES_APPEAL_FLOW.NEXTVAL INTO :NEW."APPEAL_FLOW_ID" FROM DUAL;
			IF MAXID>:NEW."APPEAL_FLOW_ID" THEN
				LOOP
					SELECT S_ES_APPEAL_FLOW.NEXTVAL INTO :NEW."APPEAL_FLOW_ID" FROM DUAL;
					EXIT WHEN MAXID<:NEW."APPEAL_FLOW_ID";
				END LOOP;
			END IF;
		END IF;
	EXCEPTION
		WHEN INTEGRITY_ERROR THEN
			RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;



BEGIN
	EXECUTE IMMEDIATE 'DROP TRIGGER TIB_ES_WF_TASK_OPINION';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP TABLE ES_WF_TASK_OPINION';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

BEGIN
	EXECUTE IMMEDIATE 'DROP SEQUENCE S_ES_WF_TASK_OPINION';
	EXCEPTION WHEN OTHERS THEN NULL;
END;

CREATE TABLE ES_WF_TASK_OPINION (
  ID NUMBER(11) NOT NULL,
  PROCESS_DEF_ID VARCHAR(20) DEFAULT NULL,
  BUSINESS_ID NUMBER(11) DEFAULT NULL,
  PROCESS_INSTANCE_ID VARCHAR(50) DEFAULT NULL,
  TASK_ID VARCHAR(50) DEFAULT NULL,
  TASK_DEFINATION_KEY VARCHAR(20) DEFAULT NULL,
  TASK_NAME VARCHAR(50) DEFAULT NULL,
  USER_ID VARCHAR(50) DEFAULT NULL,
  USER_NAME VARCHAR(50) DEFAULT NULL,
  CREATE_TIME NUMBER(20,0)  DEFAULT NULL,
  COMMENTS VARCHAR(800) DEFAULT NULL,
  ISAGREE VARCHAR(2) DEFAULT NULL,
  PRIMARY KEY (ID)
) ;


CREATE SEQUENCE S_ES_WF_TASK_OPINION

CREATE TRIGGER "TIB_ES_WF_TASK_OPINION" BEFORE INSERT
	ON ES_WF_TASK_OPINION FOR EACH ROW
	DECLARE
	INTEGRITY_ERROR  EXCEPTION;
	ERRNO            INTEGER;
	ERRMSG           CHAR(200);
	MAXID			 INTEGER;
	BEGIN
		IF :NEW."ID" IS NULL THEN
			SELECT MAX("ID") INTO MAXID FROM ES_WF_TASK_OPINION;
			SELECT S_ES_WF_TASK_OPINION.NEXTVAL INTO :NEW."ID" FROM DUAL;
			IF MAXID>:NEW."ID" THEN
				LOOP
					SELECT S_ES_WF_TASK_OPINION.NEXTVAL INTO :NEW."ID" FROM DUAL;
					EXIT WHEN MAXID<:NEW."ID";
				END LOOP;
			END IF;
		END IF;
	EXCEPTION
		WHEN INTEGRITY_ERROR THEN
			RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
